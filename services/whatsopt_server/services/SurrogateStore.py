#
# Autogenerated by Thrift Compiler (0.20.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def create_surrogate(self, surrogate_id, kind, xt, yt, options, uncertainties):
        """
        Parameters:
         - surrogate_id
         - kind
         - xt
         - yt
         - options
         - uncertainties

        """
        pass

    def copy_surrogate(self, src_id, dst_id):
        """
        Parameters:
         - src_id
         - dst_id

        """
        pass

    def qualify(self, surrogate_id, xv, yv):
        """
        Parameters:
         - surrogate_id
         - xv
         - yv

        """
        pass

    def predict_values(self, surrogate_id, x):
        """
        Parameters:
         - surrogate_id
         - x

        """
        pass

    def destroy_surrogate(self, surrogate_id):
        """
        Parameters:
         - surrogate_id

        """
        pass

    def get_sobol_pce_sensitivity_analysis(self, surrogate_id):
        """
        Parameters:
         - surrogate_id

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def create_surrogate(self, surrogate_id, kind, xt, yt, options, uncertainties):
        """
        Parameters:
         - surrogate_id
         - kind
         - xt
         - yt
         - options
         - uncertainties

        """
        self.send_create_surrogate(surrogate_id, kind, xt, yt, options, uncertainties)
        self.recv_create_surrogate()

    def send_create_surrogate(self, surrogate_id, kind, xt, yt, options, uncertainties):
        self._oprot.writeMessageBegin('create_surrogate', TMessageType.CALL, self._seqid)
        args = create_surrogate_args()
        args.surrogate_id = surrogate_id
        args.kind = kind
        args.xt = xt
        args.yt = yt
        args.options = options
        args.uncertainties = uncertainties
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_create_surrogate(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = create_surrogate_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.exc is not None:
            raise result.exc
        return

    def copy_surrogate(self, src_id, dst_id):
        """
        Parameters:
         - src_id
         - dst_id

        """
        self.send_copy_surrogate(src_id, dst_id)
        self.recv_copy_surrogate()

    def send_copy_surrogate(self, src_id, dst_id):
        self._oprot.writeMessageBegin('copy_surrogate', TMessageType.CALL, self._seqid)
        args = copy_surrogate_args()
        args.src_id = src_id
        args.dst_id = dst_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_copy_surrogate(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = copy_surrogate_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.exc is not None:
            raise result.exc
        return

    def qualify(self, surrogate_id, xv, yv):
        """
        Parameters:
         - surrogate_id
         - xv
         - yv

        """
        self.send_qualify(surrogate_id, xv, yv)
        return self.recv_qualify()

    def send_qualify(self, surrogate_id, xv, yv):
        self._oprot.writeMessageBegin('qualify', TMessageType.CALL, self._seqid)
        args = qualify_args()
        args.surrogate_id = surrogate_id
        args.xv = xv
        args.yv = yv
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_qualify(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = qualify_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.exc is not None:
            raise result.exc
        raise TApplicationException(TApplicationException.MISSING_RESULT, "qualify failed: unknown result")

    def predict_values(self, surrogate_id, x):
        """
        Parameters:
         - surrogate_id
         - x

        """
        self.send_predict_values(surrogate_id, x)
        return self.recv_predict_values()

    def send_predict_values(self, surrogate_id, x):
        self._oprot.writeMessageBegin('predict_values', TMessageType.CALL, self._seqid)
        args = predict_values_args()
        args.surrogate_id = surrogate_id
        args.x = x
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_predict_values(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = predict_values_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.exc is not None:
            raise result.exc
        raise TApplicationException(TApplicationException.MISSING_RESULT, "predict_values failed: unknown result")

    def destroy_surrogate(self, surrogate_id):
        """
        Parameters:
         - surrogate_id

        """
        self.send_destroy_surrogate(surrogate_id)
        self.recv_destroy_surrogate()

    def send_destroy_surrogate(self, surrogate_id):
        self._oprot.writeMessageBegin('destroy_surrogate', TMessageType.CALL, self._seqid)
        args = destroy_surrogate_args()
        args.surrogate_id = surrogate_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_destroy_surrogate(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = destroy_surrogate_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def get_sobol_pce_sensitivity_analysis(self, surrogate_id):
        """
        Parameters:
         - surrogate_id

        """
        self.send_get_sobol_pce_sensitivity_analysis(surrogate_id)
        return self.recv_get_sobol_pce_sensitivity_analysis()

    def send_get_sobol_pce_sensitivity_analysis(self, surrogate_id):
        self._oprot.writeMessageBegin('get_sobol_pce_sensitivity_analysis', TMessageType.CALL, self._seqid)
        args = get_sobol_pce_sensitivity_analysis_args()
        args.surrogate_id = surrogate_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_sobol_pce_sensitivity_analysis(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_sobol_pce_sensitivity_analysis_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_sobol_pce_sensitivity_analysis failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["create_surrogate"] = Processor.process_create_surrogate
        self._processMap["copy_surrogate"] = Processor.process_copy_surrogate
        self._processMap["qualify"] = Processor.process_qualify
        self._processMap["predict_values"] = Processor.process_predict_values
        self._processMap["destroy_surrogate"] = Processor.process_destroy_surrogate
        self._processMap["get_sobol_pce_sensitivity_analysis"] = Processor.process_get_sobol_pce_sensitivity_analysis
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_create_surrogate(self, seqid, iprot, oprot):
        args = create_surrogate_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = create_surrogate_result()
        try:
            self._handler.create_surrogate(args.surrogate_id, args.kind, args.xt, args.yt, args.options, args.uncertainties)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SurrogateException as exc:
            msg_type = TMessageType.REPLY
            result.exc = exc
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("create_surrogate", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_copy_surrogate(self, seqid, iprot, oprot):
        args = copy_surrogate_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = copy_surrogate_result()
        try:
            self._handler.copy_surrogate(args.src_id, args.dst_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SurrogateException as exc:
            msg_type = TMessageType.REPLY
            result.exc = exc
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("copy_surrogate", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_qualify(self, seqid, iprot, oprot):
        args = qualify_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = qualify_result()
        try:
            result.success = self._handler.qualify(args.surrogate_id, args.xv, args.yv)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SurrogateException as exc:
            msg_type = TMessageType.REPLY
            result.exc = exc
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("qualify", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_predict_values(self, seqid, iprot, oprot):
        args = predict_values_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = predict_values_result()
        try:
            result.success = self._handler.predict_values(args.surrogate_id, args.x)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SurrogateException as exc:
            msg_type = TMessageType.REPLY
            result.exc = exc
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("predict_values", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_destroy_surrogate(self, seqid, iprot, oprot):
        args = destroy_surrogate_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = destroy_surrogate_result()
        try:
            self._handler.destroy_surrogate(args.surrogate_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("destroy_surrogate", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_sobol_pce_sensitivity_analysis(self, seqid, iprot, oprot):
        args = get_sobol_pce_sensitivity_analysis_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_sobol_pce_sensitivity_analysis_result()
        try:
            result.success = self._handler.get_sobol_pce_sensitivity_analysis(args.surrogate_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_sobol_pce_sensitivity_analysis", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class create_surrogate_args(object):
    """
    Attributes:
     - surrogate_id
     - kind
     - xt
     - yt
     - options
     - uncertainties

    """


    def __init__(self, surrogate_id=None, kind=None, xt=None, yt=None, options=None, uncertainties=None,):
        self.surrogate_id = surrogate_id
        self.kind = kind
        self.xt = xt
        self.yt = yt
        self.options = options
        self.uncertainties = uncertainties

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.surrogate_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.kind = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.xt = []
                    (_etype131, _size128) = iprot.readListBegin()
                    for _i132 in range(_size128):
                        _elem133 = []
                        (_etype137, _size134) = iprot.readListBegin()
                        for _i138 in range(_size134):
                            _elem139 = iprot.readDouble()
                            _elem133.append(_elem139)
                        iprot.readListEnd()
                        self.xt.append(_elem133)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.yt = []
                    (_etype143, _size140) = iprot.readListBegin()
                    for _i144 in range(_size140):
                        _elem145 = iprot.readDouble()
                        self.yt.append(_elem145)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.options = {}
                    (_ktype147, _vtype148, _size146) = iprot.readMapBegin()
                    for _i150 in range(_size146):
                        _key151 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val152 = OptionValue()
                        _val152.read(iprot)
                        self.options[_key151] = _val152
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.uncertainties = []
                    (_etype156, _size153) = iprot.readListBegin()
                    for _i157 in range(_size153):
                        _elem158 = Distribution()
                        _elem158.read(iprot)
                        self.uncertainties.append(_elem158)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_surrogate_args')
        if self.surrogate_id is not None:
            oprot.writeFieldBegin('surrogate_id', TType.STRING, 1)
            oprot.writeString(self.surrogate_id.encode('utf-8') if sys.version_info[0] == 2 else self.surrogate_id)
            oprot.writeFieldEnd()
        if self.kind is not None:
            oprot.writeFieldBegin('kind', TType.I32, 2)
            oprot.writeI32(self.kind)
            oprot.writeFieldEnd()
        if self.xt is not None:
            oprot.writeFieldBegin('xt', TType.LIST, 3)
            oprot.writeListBegin(TType.LIST, len(self.xt))
            for iter159 in self.xt:
                oprot.writeListBegin(TType.DOUBLE, len(iter159))
                for iter160 in iter159:
                    oprot.writeDouble(iter160)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.yt is not None:
            oprot.writeFieldBegin('yt', TType.LIST, 4)
            oprot.writeListBegin(TType.DOUBLE, len(self.yt))
            for iter161 in self.yt:
                oprot.writeDouble(iter161)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.options is not None:
            oprot.writeFieldBegin('options', TType.MAP, 5)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.options))
            for kiter162, viter163 in self.options.items():
                oprot.writeString(kiter162.encode('utf-8') if sys.version_info[0] == 2 else kiter162)
                viter163.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.uncertainties is not None:
            oprot.writeFieldBegin('uncertainties', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.uncertainties))
            for iter164 in self.uncertainties:
                iter164.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_surrogate_args)
create_surrogate_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'surrogate_id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'kind', None, None, ),  # 2
    (3, TType.LIST, 'xt', (TType.LIST, (TType.DOUBLE, None, False), False), None, ),  # 3
    (4, TType.LIST, 'yt', (TType.DOUBLE, None, False), None, ),  # 4
    (5, TType.MAP, 'options', (TType.STRING, 'UTF8', TType.STRUCT, [OptionValue, None], False), None, ),  # 5
    (6, TType.LIST, 'uncertainties', (TType.STRUCT, [Distribution, None], False), None, ),  # 6
)


class create_surrogate_result(object):
    """
    Attributes:
     - exc

    """


    def __init__(self, exc=None,):
        self.exc = exc

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.exc = SurrogateException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_surrogate_result')
        if self.exc is not None:
            oprot.writeFieldBegin('exc', TType.STRUCT, 1)
            self.exc.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_surrogate_result)
create_surrogate_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'exc', [SurrogateException, None], None, ),  # 1
)


class copy_surrogate_args(object):
    """
    Attributes:
     - src_id
     - dst_id

    """


    def __init__(self, src_id=None, dst_id=None,):
        self.src_id = src_id
        self.dst_id = dst_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.src_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.dst_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('copy_surrogate_args')
        if self.src_id is not None:
            oprot.writeFieldBegin('src_id', TType.STRING, 1)
            oprot.writeString(self.src_id.encode('utf-8') if sys.version_info[0] == 2 else self.src_id)
            oprot.writeFieldEnd()
        if self.dst_id is not None:
            oprot.writeFieldBegin('dst_id', TType.STRING, 2)
            oprot.writeString(self.dst_id.encode('utf-8') if sys.version_info[0] == 2 else self.dst_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(copy_surrogate_args)
copy_surrogate_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'src_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'dst_id', 'UTF8', None, ),  # 2
)


class copy_surrogate_result(object):
    """
    Attributes:
     - exc

    """


    def __init__(self, exc=None,):
        self.exc = exc

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.exc = SurrogateException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('copy_surrogate_result')
        if self.exc is not None:
            oprot.writeFieldBegin('exc', TType.STRUCT, 1)
            self.exc.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(copy_surrogate_result)
copy_surrogate_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'exc', [SurrogateException, None], None, ),  # 1
)


class qualify_args(object):
    """
    Attributes:
     - surrogate_id
     - xv
     - yv

    """


    def __init__(self, surrogate_id=None, xv=None, yv=None,):
        self.surrogate_id = surrogate_id
        self.xv = xv
        self.yv = yv

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.surrogate_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.xv = []
                    (_etype168, _size165) = iprot.readListBegin()
                    for _i169 in range(_size165):
                        _elem170 = []
                        (_etype174, _size171) = iprot.readListBegin()
                        for _i175 in range(_size171):
                            _elem176 = iprot.readDouble()
                            _elem170.append(_elem176)
                        iprot.readListEnd()
                        self.xv.append(_elem170)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.yv = []
                    (_etype180, _size177) = iprot.readListBegin()
                    for _i181 in range(_size177):
                        _elem182 = iprot.readDouble()
                        self.yv.append(_elem182)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('qualify_args')
        if self.surrogate_id is not None:
            oprot.writeFieldBegin('surrogate_id', TType.STRING, 1)
            oprot.writeString(self.surrogate_id.encode('utf-8') if sys.version_info[0] == 2 else self.surrogate_id)
            oprot.writeFieldEnd()
        if self.xv is not None:
            oprot.writeFieldBegin('xv', TType.LIST, 2)
            oprot.writeListBegin(TType.LIST, len(self.xv))
            for iter183 in self.xv:
                oprot.writeListBegin(TType.DOUBLE, len(iter183))
                for iter184 in iter183:
                    oprot.writeDouble(iter184)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.yv is not None:
            oprot.writeFieldBegin('yv', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.yv))
            for iter185 in self.yv:
                oprot.writeDouble(iter185)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(qualify_args)
qualify_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'surrogate_id', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'xv', (TType.LIST, (TType.DOUBLE, None, False), False), None, ),  # 2
    (3, TType.LIST, 'yv', (TType.DOUBLE, None, False), None, ),  # 3
)


class qualify_result(object):
    """
    Attributes:
     - success
     - exc

    """


    def __init__(self, success=None, exc=None,):
        self.success = success
        self.exc = exc

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SurrogateQualification()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.exc = SurrogateException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('qualify_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.exc is not None:
            oprot.writeFieldBegin('exc', TType.STRUCT, 1)
            self.exc.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(qualify_result)
qualify_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SurrogateQualification, None], None, ),  # 0
    (1, TType.STRUCT, 'exc', [SurrogateException, None], None, ),  # 1
)


class predict_values_args(object):
    """
    Attributes:
     - surrogate_id
     - x

    """


    def __init__(self, surrogate_id=None, x=None,):
        self.surrogate_id = surrogate_id
        self.x = x

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.surrogate_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.x = []
                    (_etype189, _size186) = iprot.readListBegin()
                    for _i190 in range(_size186):
                        _elem191 = []
                        (_etype195, _size192) = iprot.readListBegin()
                        for _i196 in range(_size192):
                            _elem197 = iprot.readDouble()
                            _elem191.append(_elem197)
                        iprot.readListEnd()
                        self.x.append(_elem191)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('predict_values_args')
        if self.surrogate_id is not None:
            oprot.writeFieldBegin('surrogate_id', TType.STRING, 1)
            oprot.writeString(self.surrogate_id.encode('utf-8') if sys.version_info[0] == 2 else self.surrogate_id)
            oprot.writeFieldEnd()
        if self.x is not None:
            oprot.writeFieldBegin('x', TType.LIST, 2)
            oprot.writeListBegin(TType.LIST, len(self.x))
            for iter198 in self.x:
                oprot.writeListBegin(TType.DOUBLE, len(iter198))
                for iter199 in iter198:
                    oprot.writeDouble(iter199)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(predict_values_args)
predict_values_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'surrogate_id', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'x', (TType.LIST, (TType.DOUBLE, None, False), False), None, ),  # 2
)


class predict_values_result(object):
    """
    Attributes:
     - success
     - exc

    """


    def __init__(self, success=None, exc=None,):
        self.success = success
        self.exc = exc

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype203, _size200) = iprot.readListBegin()
                    for _i204 in range(_size200):
                        _elem205 = iprot.readDouble()
                        self.success.append(_elem205)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.exc = SurrogateException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('predict_values_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.DOUBLE, len(self.success))
            for iter206 in self.success:
                oprot.writeDouble(iter206)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.exc is not None:
            oprot.writeFieldBegin('exc', TType.STRUCT, 1)
            self.exc.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(predict_values_result)
predict_values_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.DOUBLE, None, False), None, ),  # 0
    (1, TType.STRUCT, 'exc', [SurrogateException, None], None, ),  # 1
)


class destroy_surrogate_args(object):
    """
    Attributes:
     - surrogate_id

    """


    def __init__(self, surrogate_id=None,):
        self.surrogate_id = surrogate_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.surrogate_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('destroy_surrogate_args')
        if self.surrogate_id is not None:
            oprot.writeFieldBegin('surrogate_id', TType.STRING, 1)
            oprot.writeString(self.surrogate_id.encode('utf-8') if sys.version_info[0] == 2 else self.surrogate_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(destroy_surrogate_args)
destroy_surrogate_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'surrogate_id', 'UTF8', None, ),  # 1
)


class destroy_surrogate_result(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('destroy_surrogate_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(destroy_surrogate_result)
destroy_surrogate_result.thrift_spec = (
)


class get_sobol_pce_sensitivity_analysis_args(object):
    """
    Attributes:
     - surrogate_id

    """


    def __init__(self, surrogate_id=None,):
        self.surrogate_id = surrogate_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.surrogate_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_sobol_pce_sensitivity_analysis_args')
        if self.surrogate_id is not None:
            oprot.writeFieldBegin('surrogate_id', TType.STRING, 1)
            oprot.writeString(self.surrogate_id.encode('utf-8') if sys.version_info[0] == 2 else self.surrogate_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_sobol_pce_sensitivity_analysis_args)
get_sobol_pce_sensitivity_analysis_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'surrogate_id', 'UTF8', None, ),  # 1
)


class get_sobol_pce_sensitivity_analysis_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SobolIndices()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_sobol_pce_sensitivity_analysis_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_sobol_pce_sensitivity_analysis_result)
get_sobol_pce_sensitivity_analysis_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SobolIndices, None], None, ),  # 0
)
fix_spec(all_structs)
del all_structs
