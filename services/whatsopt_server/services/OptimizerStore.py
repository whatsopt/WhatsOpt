#
# Autogenerated by Thrift Compiler (0.18.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def create_optimizer(self, optimizer_id, kind, xlimits, cstr_specs, options):
        """
        Parameters:
         - optimizer_id
         - kind
         - xlimits
         - cstr_specs
         - options

        """
        pass

    def create_mixint_optimizer(self, optimizer_id, kind, xtypes, n_obj, cstr_specs, options):
        """
        Parameters:
         - optimizer_id
         - kind
         - xtypes
         - n_obj
         - cstr_specs
         - options

        """
        pass

    def ask(self, optimizer_id, with_best):
        """
        Parameters:
         - optimizer_id
         - with_best

        """
        pass

    def tell(self, optimizer_id, x, y):
        """
        Parameters:
         - optimizer_id
         - x
         - y

        """
        pass

    def destroy_optimizer(self, optimizer_id):
        """
        Parameters:
         - optimizer_id

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def create_optimizer(self, optimizer_id, kind, xlimits, cstr_specs, options):
        """
        Parameters:
         - optimizer_id
         - kind
         - xlimits
         - cstr_specs
         - options

        """
        self.send_create_optimizer(optimizer_id, kind, xlimits, cstr_specs, options)
        self.recv_create_optimizer()

    def send_create_optimizer(self, optimizer_id, kind, xlimits, cstr_specs, options):
        self._oprot.writeMessageBegin('create_optimizer', TMessageType.CALL, self._seqid)
        args = create_optimizer_args()
        args.optimizer_id = optimizer_id
        args.kind = kind
        args.xlimits = xlimits
        args.cstr_specs = cstr_specs
        args.options = options
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_create_optimizer(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = create_optimizer_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.exc is not None:
            raise result.exc
        return

    def create_mixint_optimizer(self, optimizer_id, kind, xtypes, n_obj, cstr_specs, options):
        """
        Parameters:
         - optimizer_id
         - kind
         - xtypes
         - n_obj
         - cstr_specs
         - options

        """
        self.send_create_mixint_optimizer(optimizer_id, kind, xtypes, n_obj, cstr_specs, options)
        self.recv_create_mixint_optimizer()

    def send_create_mixint_optimizer(self, optimizer_id, kind, xtypes, n_obj, cstr_specs, options):
        self._oprot.writeMessageBegin('create_mixint_optimizer', TMessageType.CALL, self._seqid)
        args = create_mixint_optimizer_args()
        args.optimizer_id = optimizer_id
        args.kind = kind
        args.xtypes = xtypes
        args.n_obj = n_obj
        args.cstr_specs = cstr_specs
        args.options = options
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_create_mixint_optimizer(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = create_mixint_optimizer_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.exc is not None:
            raise result.exc
        return

    def ask(self, optimizer_id, with_best):
        """
        Parameters:
         - optimizer_id
         - with_best

        """
        self.send_ask(optimizer_id, with_best)
        return self.recv_ask()

    def send_ask(self, optimizer_id, with_best):
        self._oprot.writeMessageBegin('ask', TMessageType.CALL, self._seqid)
        args = ask_args()
        args.optimizer_id = optimizer_id
        args.with_best = with_best
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_ask(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = ask_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.exc is not None:
            raise result.exc
        raise TApplicationException(TApplicationException.MISSING_RESULT, "ask failed: unknown result")

    def tell(self, optimizer_id, x, y):
        """
        Parameters:
         - optimizer_id
         - x
         - y

        """
        self.send_tell(optimizer_id, x, y)
        self.recv_tell()

    def send_tell(self, optimizer_id, x, y):
        self._oprot.writeMessageBegin('tell', TMessageType.CALL, self._seqid)
        args = tell_args()
        args.optimizer_id = optimizer_id
        args.x = x
        args.y = y
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_tell(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = tell_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.exc is not None:
            raise result.exc
        return

    def destroy_optimizer(self, optimizer_id):
        """
        Parameters:
         - optimizer_id

        """
        self.send_destroy_optimizer(optimizer_id)
        self.recv_destroy_optimizer()

    def send_destroy_optimizer(self, optimizer_id):
        self._oprot.writeMessageBegin('destroy_optimizer', TMessageType.CALL, self._seqid)
        args = destroy_optimizer_args()
        args.optimizer_id = optimizer_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_destroy_optimizer(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = destroy_optimizer_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["create_optimizer"] = Processor.process_create_optimizer
        self._processMap["create_mixint_optimizer"] = Processor.process_create_mixint_optimizer
        self._processMap["ask"] = Processor.process_ask
        self._processMap["tell"] = Processor.process_tell
        self._processMap["destroy_optimizer"] = Processor.process_destroy_optimizer
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_create_optimizer(self, seqid, iprot, oprot):
        args = create_optimizer_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = create_optimizer_result()
        try:
            self._handler.create_optimizer(args.optimizer_id, args.kind, args.xlimits, args.cstr_specs, args.options)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except OptimizerException as exc:
            msg_type = TMessageType.REPLY
            result.exc = exc
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("create_optimizer", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_create_mixint_optimizer(self, seqid, iprot, oprot):
        args = create_mixint_optimizer_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = create_mixint_optimizer_result()
        try:
            self._handler.create_mixint_optimizer(args.optimizer_id, args.kind, args.xtypes, args.n_obj, args.cstr_specs, args.options)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except OptimizerException as exc:
            msg_type = TMessageType.REPLY
            result.exc = exc
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("create_mixint_optimizer", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_ask(self, seqid, iprot, oprot):
        args = ask_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ask_result()
        try:
            result.success = self._handler.ask(args.optimizer_id, args.with_best)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except OptimizerException as exc:
            msg_type = TMessageType.REPLY
            result.exc = exc
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("ask", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_tell(self, seqid, iprot, oprot):
        args = tell_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = tell_result()
        try:
            self._handler.tell(args.optimizer_id, args.x, args.y)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except OptimizerException as exc:
            msg_type = TMessageType.REPLY
            result.exc = exc
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("tell", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_destroy_optimizer(self, seqid, iprot, oprot):
        args = destroy_optimizer_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = destroy_optimizer_result()
        try:
            self._handler.destroy_optimizer(args.optimizer_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("destroy_optimizer", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class create_optimizer_args(object):
    """
    Attributes:
     - optimizer_id
     - kind
     - xlimits
     - cstr_specs
     - options

    """


    def __init__(self, optimizer_id=None, kind=None, xlimits=None, cstr_specs=None, options=None,):
        self.optimizer_id = optimizer_id
        self.kind = kind
        self.xlimits = xlimits
        self.cstr_specs = cstr_specs
        self.options = options

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.optimizer_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.kind = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.xlimits = []
                    (_etype182, _size179) = iprot.readListBegin()
                    for _i183 in range(_size179):
                        _elem184 = []
                        (_etype188, _size185) = iprot.readListBegin()
                        for _i189 in range(_size185):
                            _elem190 = iprot.readDouble()
                            _elem184.append(_elem190)
                        iprot.readListEnd()
                        self.xlimits.append(_elem184)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.cstr_specs = []
                    (_etype194, _size191) = iprot.readListBegin()
                    for _i195 in range(_size191):
                        _elem196 = ConstraintSpec()
                        _elem196.read(iprot)
                        self.cstr_specs.append(_elem196)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.options = {}
                    (_ktype198, _vtype199, _size197) = iprot.readMapBegin()
                    for _i201 in range(_size197):
                        _key202 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val203 = OptionValue()
                        _val203.read(iprot)
                        self.options[_key202] = _val203
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_optimizer_args')
        if self.optimizer_id is not None:
            oprot.writeFieldBegin('optimizer_id', TType.STRING, 1)
            oprot.writeString(self.optimizer_id.encode('utf-8') if sys.version_info[0] == 2 else self.optimizer_id)
            oprot.writeFieldEnd()
        if self.kind is not None:
            oprot.writeFieldBegin('kind', TType.I32, 2)
            oprot.writeI32(self.kind)
            oprot.writeFieldEnd()
        if self.xlimits is not None:
            oprot.writeFieldBegin('xlimits', TType.LIST, 3)
            oprot.writeListBegin(TType.LIST, len(self.xlimits))
            for iter204 in self.xlimits:
                oprot.writeListBegin(TType.DOUBLE, len(iter204))
                for iter205 in iter204:
                    oprot.writeDouble(iter205)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cstr_specs is not None:
            oprot.writeFieldBegin('cstr_specs', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.cstr_specs))
            for iter206 in self.cstr_specs:
                iter206.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.options is not None:
            oprot.writeFieldBegin('options', TType.MAP, 5)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.options))
            for kiter207, viter208 in self.options.items():
                oprot.writeString(kiter207.encode('utf-8') if sys.version_info[0] == 2 else kiter207)
                viter208.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_optimizer_args)
create_optimizer_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'optimizer_id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'kind', None, None, ),  # 2
    (3, TType.LIST, 'xlimits', (TType.LIST, (TType.DOUBLE, None, False), False), None, ),  # 3
    (4, TType.LIST, 'cstr_specs', (TType.STRUCT, [ConstraintSpec, None], False), None, ),  # 4
    (5, TType.MAP, 'options', (TType.STRING, 'UTF8', TType.STRUCT, [OptionValue, None], False), None, ),  # 5
)


class create_optimizer_result(object):
    """
    Attributes:
     - exc

    """


    def __init__(self, exc=None,):
        self.exc = exc

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.exc = OptimizerException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_optimizer_result')
        if self.exc is not None:
            oprot.writeFieldBegin('exc', TType.STRUCT, 1)
            self.exc.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_optimizer_result)
create_optimizer_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'exc', [OptimizerException, None], None, ),  # 1
)


class create_mixint_optimizer_args(object):
    """
    Attributes:
     - optimizer_id
     - kind
     - xtypes
     - n_obj
     - cstr_specs
     - options

    """


    def __init__(self, optimizer_id=None, kind=None, xtypes=None, n_obj=None, cstr_specs=None, options=None,):
        self.optimizer_id = optimizer_id
        self.kind = kind
        self.xtypes = xtypes
        self.n_obj = n_obj
        self.cstr_specs = cstr_specs
        self.options = options

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.optimizer_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.kind = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.xtypes = []
                    (_etype212, _size209) = iprot.readListBegin()
                    for _i213 in range(_size209):
                        _elem214 = Xtype()
                        _elem214.read(iprot)
                        self.xtypes.append(_elem214)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.n_obj = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.cstr_specs = []
                    (_etype218, _size215) = iprot.readListBegin()
                    for _i219 in range(_size215):
                        _elem220 = ConstraintSpec()
                        _elem220.read(iprot)
                        self.cstr_specs.append(_elem220)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.MAP:
                    self.options = {}
                    (_ktype222, _vtype223, _size221) = iprot.readMapBegin()
                    for _i225 in range(_size221):
                        _key226 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val227 = OptionValue()
                        _val227.read(iprot)
                        self.options[_key226] = _val227
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_mixint_optimizer_args')
        if self.optimizer_id is not None:
            oprot.writeFieldBegin('optimizer_id', TType.STRING, 1)
            oprot.writeString(self.optimizer_id.encode('utf-8') if sys.version_info[0] == 2 else self.optimizer_id)
            oprot.writeFieldEnd()
        if self.kind is not None:
            oprot.writeFieldBegin('kind', TType.I32, 2)
            oprot.writeI32(self.kind)
            oprot.writeFieldEnd()
        if self.xtypes is not None:
            oprot.writeFieldBegin('xtypes', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.xtypes))
            for iter228 in self.xtypes:
                iter228.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.n_obj is not None:
            oprot.writeFieldBegin('n_obj', TType.I64, 4)
            oprot.writeI64(self.n_obj)
            oprot.writeFieldEnd()
        if self.cstr_specs is not None:
            oprot.writeFieldBegin('cstr_specs', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.cstr_specs))
            for iter229 in self.cstr_specs:
                iter229.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.options is not None:
            oprot.writeFieldBegin('options', TType.MAP, 6)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.options))
            for kiter230, viter231 in self.options.items():
                oprot.writeString(kiter230.encode('utf-8') if sys.version_info[0] == 2 else kiter230)
                viter231.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_mixint_optimizer_args)
create_mixint_optimizer_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'optimizer_id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'kind', None, None, ),  # 2
    (3, TType.LIST, 'xtypes', (TType.STRUCT, [Xtype, None], False), None, ),  # 3
    (4, TType.I64, 'n_obj', None, None, ),  # 4
    (5, TType.LIST, 'cstr_specs', (TType.STRUCT, [ConstraintSpec, None], False), None, ),  # 5
    (6, TType.MAP, 'options', (TType.STRING, 'UTF8', TType.STRUCT, [OptionValue, None], False), None, ),  # 6
)


class create_mixint_optimizer_result(object):
    """
    Attributes:
     - exc

    """


    def __init__(self, exc=None,):
        self.exc = exc

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.exc = OptimizerException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_mixint_optimizer_result')
        if self.exc is not None:
            oprot.writeFieldBegin('exc', TType.STRUCT, 1)
            self.exc.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_mixint_optimizer_result)
create_mixint_optimizer_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'exc', [OptimizerException, None], None, ),  # 1
)


class ask_args(object):
    """
    Attributes:
     - optimizer_id
     - with_best

    """


    def __init__(self, optimizer_id=None, with_best=None,):
        self.optimizer_id = optimizer_id
        self.with_best = with_best

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.optimizer_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.with_best = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ask_args')
        if self.optimizer_id is not None:
            oprot.writeFieldBegin('optimizer_id', TType.STRING, 1)
            oprot.writeString(self.optimizer_id.encode('utf-8') if sys.version_info[0] == 2 else self.optimizer_id)
            oprot.writeFieldEnd()
        if self.with_best is not None:
            oprot.writeFieldBegin('with_best', TType.BOOL, 2)
            oprot.writeBool(self.with_best)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ask_args)
ask_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'optimizer_id', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'with_best', None, None, ),  # 2
)


class ask_result(object):
    """
    Attributes:
     - success
     - exc

    """


    def __init__(self, success=None, exc=None,):
        self.success = success
        self.exc = exc

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = OptimizerResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.exc = OptimizerException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ask_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.exc is not None:
            oprot.writeFieldBegin('exc', TType.STRUCT, 1)
            self.exc.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ask_result)
ask_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [OptimizerResult, None], None, ),  # 0
    (1, TType.STRUCT, 'exc', [OptimizerException, None], None, ),  # 1
)


class tell_args(object):
    """
    Attributes:
     - optimizer_id
     - x
     - y

    """


    def __init__(self, optimizer_id=None, x=None, y=None,):
        self.optimizer_id = optimizer_id
        self.x = x
        self.y = y

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.optimizer_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.x = []
                    (_etype235, _size232) = iprot.readListBegin()
                    for _i236 in range(_size232):
                        _elem237 = []
                        (_etype241, _size238) = iprot.readListBegin()
                        for _i242 in range(_size238):
                            _elem243 = iprot.readDouble()
                            _elem237.append(_elem243)
                        iprot.readListEnd()
                        self.x.append(_elem237)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.y = []
                    (_etype247, _size244) = iprot.readListBegin()
                    for _i248 in range(_size244):
                        _elem249 = []
                        (_etype253, _size250) = iprot.readListBegin()
                        for _i254 in range(_size250):
                            _elem255 = iprot.readDouble()
                            _elem249.append(_elem255)
                        iprot.readListEnd()
                        self.y.append(_elem249)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('tell_args')
        if self.optimizer_id is not None:
            oprot.writeFieldBegin('optimizer_id', TType.STRING, 1)
            oprot.writeString(self.optimizer_id.encode('utf-8') if sys.version_info[0] == 2 else self.optimizer_id)
            oprot.writeFieldEnd()
        if self.x is not None:
            oprot.writeFieldBegin('x', TType.LIST, 2)
            oprot.writeListBegin(TType.LIST, len(self.x))
            for iter256 in self.x:
                oprot.writeListBegin(TType.DOUBLE, len(iter256))
                for iter257 in iter256:
                    oprot.writeDouble(iter257)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.y is not None:
            oprot.writeFieldBegin('y', TType.LIST, 3)
            oprot.writeListBegin(TType.LIST, len(self.y))
            for iter258 in self.y:
                oprot.writeListBegin(TType.DOUBLE, len(iter258))
                for iter259 in iter258:
                    oprot.writeDouble(iter259)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(tell_args)
tell_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'optimizer_id', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'x', (TType.LIST, (TType.DOUBLE, None, False), False), None, ),  # 2
    (3, TType.LIST, 'y', (TType.LIST, (TType.DOUBLE, None, False), False), None, ),  # 3
)


class tell_result(object):
    """
    Attributes:
     - exc

    """


    def __init__(self, exc=None,):
        self.exc = exc

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.exc = OptimizerException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('tell_result')
        if self.exc is not None:
            oprot.writeFieldBegin('exc', TType.STRUCT, 1)
            self.exc.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(tell_result)
tell_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'exc', [OptimizerException, None], None, ),  # 1
)


class destroy_optimizer_args(object):
    """
    Attributes:
     - optimizer_id

    """


    def __init__(self, optimizer_id=None,):
        self.optimizer_id = optimizer_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.optimizer_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('destroy_optimizer_args')
        if self.optimizer_id is not None:
            oprot.writeFieldBegin('optimizer_id', TType.STRING, 1)
            oprot.writeString(self.optimizer_id.encode('utf-8') if sys.version_info[0] == 2 else self.optimizer_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(destroy_optimizer_args)
destroy_optimizer_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'optimizer_id', 'UTF8', None, ),  # 1
)


class destroy_optimizer_result(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('destroy_optimizer_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(destroy_optimizer_result)
destroy_optimizer_result.thrift_spec = (
)
fix_spec(all_structs)
del all_structs
