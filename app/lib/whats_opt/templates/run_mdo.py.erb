import numpy as np
from numpy import nan, inf
import openmdao.api as om
<%- if @driver.onerasego? -%>
from openmdao_extensions.onera_sego_driver import OneraSegoDriver
<%- elsif @driver.egobox? -%>
from openmdao_extensions.egobox_egor_driver import EgoboxEgorDriver
import egobox as egx
import logging
logging.basicConfig(level=logging.INFO)
<%- end -%>
<%- if @egmdo -%>
from openmdao.utils.mpi import MPI
from <%= @pkg_prefix %><%= @egmdo_module %>.<%= @impl.py_modulename %>_egmda import <%= @impl.py_classname %>Egmda as <%= @impl.py_classname %>
<%- if @remote -%>
from <%= @pkg_prefix %><%= @server_module %>.<%= @impl.py_modulename %>_proxy import <%= @impl.py_classname %>Proxy
<%- end -%>
<%- elsif @remote -%>
from <%= @pkg_prefix %><%= @server_module %>.<%= @impl.py_modulename %>_proxy import <%= @impl.py_classname %>Proxy as <%= @impl.py_classname %>
<%- else -%>
from <%= @pkg_prefix %><%= @impl.py_modulename %> import <%= @impl.py_classname %>
<%- end -%>
from mda_init import initialize

# Problem definition
<%- if @egmdo %>
<%- if @remote -%>
pb = om.Problem(<%= @impl.py_classname %>(discipline_factory=<%= @impl.py_classname %>Proxy()))
<%- else -%>
# Options: discipline_factory=None, gp_factory=None, 
# n_doe_pce=500, epsilon_coeff_var=1e-3, threshold_coeff_var=1e-3, n_iter_max=10, 
# parallel=False, outdir=".", plot=False, plot_range=[0, 50]
parallel = (MPI is not None and MPI.COMM_WORLD.size > 1)
pb = om.Problem(<%= @impl.py_classname %>(parallel=parallel))
<%- end -%>
<%- else -%>
pb = om.Problem(<%= @impl.py_classname %>())
<%- end -%>

<%- if @driver.pyoptsparse? -%>
# Subclass to give a well-formed name (i.e. '<lib>_optimizer_<algo>') 
# used to manage results afterwards in WhatsOpt
class NamedPyOptSparseDriver(om.pyOptSparseDriver):
    def _get_name(self):
        return '<%= "pyoptsparse_optimizer_#{@driver.algo_option.downcase}" %>'

pb.driver = NamedPyOptSparseDriver()
<%- elsif @driver.onerasego? -%>
pb.driver = OneraSegoDriver()
<%- elsif @driver.egobox? -%>
pb.driver = EgoboxEgorDriver()
<%- else -%>
# Subclass to give a well-formed name (i.e. '<lib>_optimizer_<algo>') 
# used to manage results afterwards in WhatsOpt
class NamedScipyOptimizeDriver(om.ScipyOptimizeDriver):
    def _get_name(self):
        return '<%= "scipy_optimizer_#{@driver.algo_option.downcase}" %>'
pb.driver = NamedScipyOptimizeDriver()
<%- end -%>

# Optimizer options
pb.driver.options['optimizer'] = '<%= @driver.algo_option %>'
<%- @driver.options.each do |k, v| -%>
pb.driver.options['<%= k %>'] = <%= v %>
<%- end -%>
<%- @driver.opt_settings.each do |k, v| -%>
pb.driver.opt_settings['<%= k %>'] = <%= v %>
<%- end -%>

# pb.driver.options['debug_print'] = ['desvars','ln_cons','nl_cons','objs', 'totals']
pb.driver.options['debug_print'] = []

<%= @generator.render_partial('recorder_partial.py.erb') %>

# Design variables
<%- if @mda.design_variables.empty? -%>
print("Error: You have to specify some design variables then update the run_<%= @egmdo ? "eg" : "" %>mdo.py script and retry.")
exit(-1)
<%- end -%>
<%- @mda.design_variables.each do |dv| -%>
<%- if dv.lower_py_value == "-inf" ||  dv.upper_py_value == "inf" -%>
print("Error: You have to set bounds to the '<%= dv.name %>' design variable then update the run_<%= @egmdo ? "eg" : "" %>mdo.py script code and retry.")
exit(-1)
<%- end -%>
pb.model.add_design_var('<%= dv.name %>', lower=<%= dv.lower_py_value %>, upper=<%= dv.upper_py_value %><%= @impl.use_units && !dv.units.blank? ? ", units='#{dv.units}'":"" %>)
<%- end -%>

<%- if @mda.objective_variables.empty? -%>
print("Error: You have to specify an optimization objective then update the run_<%= @egmdo ? "eg" : "" %>mdo.py script and retry.")
exit(-1)
<% end %>
# Objective and constraints definition
<% @mda.min_objective_variables.each do |voi| -%>
pb.model.add_objective('<%= voi.name %>'<%= @impl.use_units && !voi.units.blank? ? ", units='#{voi.units}'":"" %>)
<%- end -%>
<%- @mda.max_objective_variables.each do |voi| -%>
pb.model.add_objective('<%= voi.name %>', scaler=-1<%= @impl.use_units && !voi.units.blank? ? ", units='#{voi.units}'":"" %>)
<%- end -%>
<%- @mda.neg_constraint_variables.each do |voi| -%>
pb.model.add_constraint('<%= voi.name %>', upper=<%= voi.cstr_upper_py_value %><%= @impl.use_units && !voi.units.blank? ? ", units='#{voi.units}'":"" %>)
<%- end -%>
<%- @mda.pos_constraint_variables.each do |voi| -%>
pb.model.add_constraint('<%= voi.name %>', lower=<%= voi.cstr_lower_py_value %><%= @impl.use_units && !voi.units.blank? ? ", units='#{voi.units}'":"" %>)
<%- end -%>
<%- @mda.eq_constraint_variables.each do |voi| -%>
pb.model.add_constraint('<%= voi.name %>', equals=<%= voi.cstr_init_py_value %><%= @impl.use_units && !voi.units.blank? ? ", units='#{voi.units}'":"" %>)
<%- end -%>
<%- @mda.bounded_constraint_variables.each do |voi| -%>
pb.model.add_constraint('<%= voi.name %>', lower=<%= voi.cstr_lower_py_value %>, upper=<%= voi.cstr_upper_py_value %><%= @impl.use_units && !voi.units.blank? ? ", units='#{voi.units}'":"" %>)
<%- end -%>

# Run optimizer
pb.setup()
initialize(pb)

pb.run_driver()

# Print results
<%- if @egmdo -%>
if not MPI or (MPI and MPI.COMM_WORLD.rank == 0):
<%- @mda.design_variables.each do |dv| -%>
    print("<%= dv.name %>= {}".format(pb['<%= dv.name %>']))
<%- end -%>
<%- else -%>
<%- @mda.design_variables.each do |dv| %>
print("<%= dv.name %>= {}".format(pb['<%= dv.name %>']))<% end %>
<%- end %>
# Code snippet to read result data back from recorded file
# cr = om.CaseReader(case_recorder_filename)
# cases = cr.get_cases()
# for case in cases:
#     print(case.name, sorted(case.outputs))
#     for name in case.outputs:
#         print(f"{name}={case.outputs[name]}")