#!/usr/bin/env python
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.server import TServer

from <%= @pkg_prefix %><%= @impl.py_full_modulename %> import <%= @impl.py_classname %>Factory as Factory
from <%= @pkg_prefix %><%= @server_module %>.<%= @impl.py_modulename %> import <%= @impl.py_classname %> as <%= @impl.py_classname %>Service
from <%= @pkg_prefix %><%= @server_module %>.<%= @impl.py_modulename %>_conversions import *
from <%= @pkg_prefix %><%= @server_module %>.remote_discipline import *

class <%= @impl.py_classname %>Handler:

    def __init__(self):
        factory = Factory()
        <% @mda.all_plain_disciplines.each do |disc| %>
        self.<%= disc.impl.snake_modulename %> = factory.create_<%= disc.impl.snake_modulename %>()
        self.<%= disc.impl.snake_modulename %>.setup()
        <% end %>

    ### Admin interface

    def ping(self):
        print("Ping!")

    def shutdown(self):
        print("Shutting down <%= @impl.py_classname %> server...")
        exit(0)

    ### <%= @impl.py_classname %> interface
<% @mda.all_plain_disciplines.each do |disc| %>
    def compute_<%= disc.impl.snake_modulename %>(self, ins):
<% if !disc.local?(@remote_ip) -%>
        socket = TSocket.TSocket('<%= disc.endpoint&.host %>', <%= disc.endpoint&.port %>)
        transport = TTransport.TBufferedTransport(socket)
        protocol = TBinaryProtocol.TBinaryProtocol(transport)
        thrift_client = <%= @impl.py_classname %>.Client(protocol)
        transport.open()
        outs = thrift_client.compute_<%= disc.impl.snake_modulename %>(ins)
        transport.close()
        return outs
<% else -%>
        outputs = {}
        inputs = to_openmdao_<%= disc.impl.snake_modulename %>_inputs(ins)
        self.<%= disc.impl.snake_modulename %>.compute(inputs, outputs)
        return to_thrift_<%= disc.impl.snake_modulename %>_output(outputs)
<% end -%>
<% end -%>

def run_server(port):
    handler = <%= @impl.py_classname %>Handler()
    processor = <%= @impl.py_classname %>Service.Processor(handler)
    transport = TSocket.TServerSocket('0.0.0.0', port=port)
    tfactory = TTransport.TBufferedTransportFactory()
    pfactory = TBinaryProtocol.TBinaryProtocolFactory()

    print("Start <%= @impl.py_classname %> analysis server listening on port {}".format(port))
    server = TServer.TSimpleServer(processor, transport, tfactory, pfactory)
    server.serve()

if __name__=="__main__":
    from optparse import OptionParser

    parser = OptionParser()
    parser.add_option("-p", "--port", type="int",
                      dest="port", default=<%= @server_port %>,
                      help="server listening port number")
    (options, args) = parser.parse_args()

    run_server(options.port)
    print("done!")
