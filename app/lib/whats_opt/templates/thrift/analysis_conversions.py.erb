import numpy as np
from .<%= @impl.py_modulename %>.ttypes import *

<% @mda.all_plain_disciplines.each do |disc| -%>

# <%= disc.impl.py_classname %> 
def to_openmdao_<%= disc.impl.snake_modulename%>_inputs(ins, inputs={}):
    <% disc.impl.numeric_input_vars.each do |var| %>
    inputs['<%= var.name %>'] = np.array(ins.<%= var.thrift_name %>)<% end %>
    return inputs

def to_thrift_<%= disc.impl.snake_modulename%>_input(inputs):
    ins = <%= disc.impl.camel_modulename%>Input()
    <% disc.impl.numeric_input_vars.each do |var| %>
    <% if var.ndim > 0 %>
    ins.<%= var.name %> = inputs['<%= var.thrift_name %>'].tolist()
    <% else %>
    ins.<%= var.name %> = <%= var.type=="Integer" ? "int" : "float"%>(inputs['<%= var.name %>'])
    <% end %><% end %>
    return ins

def to_openmdao_<%= disc.impl.snake_modulename%>_outputs(output, outputs={}):
    <% disc.impl.numeric_output_vars.each do |var| %>
    outputs['<%= var.name %>'] = np.array(output.<%= var.name %>)<% end %>
    return outputs

def to_thrift_<%= disc.impl.snake_modulename%>_output(outputs):
    output = <%= disc.impl.camel_modulename%>Output()
    <% disc.impl.numeric_output_vars.each do |var| %>
    <% if var.ndim > 0 %>
    output.<%= var.name %> = outputs['<%= var.name %>'].tolist()
    <% else %>
    output.<%= var.name %> = <%= var.type=="Integer" ? "int" : "float"%>(outputs['<%= var.name %>'])
    <% end %><% end %>
    return output
<% end -%>

