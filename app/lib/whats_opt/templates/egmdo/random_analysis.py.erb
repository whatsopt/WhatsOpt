import os
import numpy as np
from numpy import nan, inf
import pickle

import openmdao.api as om
<% if @impl.nonlinear_solver.reckless? -%>
from openmdao_extensions.reckless_nonlinear_block_gs import RecklessNonlinearBlockGS
<% else -%>
from openmdao.api import <%= @impl.nonlinear_solver.name %>
<% end -%>
from openmdao.api import NewtonSolver
from openmdao.api import <%= @impl.linear_solver.name %>
<%- @mda.plain_disciplines.each do |disc| -%>
<%- if disc.openmdao_impl&.egmdo_surrogate -%>

class <%= disc.impl.py_classname %>RandomDiscipline(om.ExplicitComponent):
    """ An OpenMDAO base component to encapsulate <%= disc.impl.py_classname %> discipline """
    def __init__(self, gp_factory, **kwargs):
        super().__init__(**kwargs)
<%- disc.impl.numeric_output_vars.each do |v| -%>        
        with open(gp_factory.gp_filename("<%= disc.impl.snake_modulename %>", "<%= v.py_varname %>"), 'rb') as f:
            self.gp_<%= v.py_varname %> = pickle.load(f) 
<%- end %>

<%- unless disc.variables.empty? -%>
    def setup(self):
<%- disc.impl.numeric_input_vars.each do |var| %>
        self.add_input('<%= var.py_varname %>', val=<%= var.init_py_value %>, desc='<%= var.escaped_desc %>'<%= @impl.use_units && !var.units.blank? ? ", units='#{var.units}'":"" %>)<%- end %>
<%- disc.impl.numeric_output_vars.each do |var| %>
        self.add_input('_xi_<%= var.py_varname %>', val=0.0)<%- end %>
<%- disc.impl.numeric_output_vars.each do |var| -%>
<%- if var.scaling.blank? -%>
        self.add_output('<%= var.py_varname %>', val=<%= var.init_py_value %>, desc='<%= var.escaped_desc %>'<%= @impl.use_units && !var.units.blank? ? ", units='#{var.units}'":"" %>)
<%- else -%>
        self.add_output('<%= var.py_varname %>', val=<%= var.init_py_value %>, desc='<%= var.escaped_desc %>',
                        ref=<%= var.scaling_ref_py_value %>, ref0=<%= var.scaling_ref0_py_value %>, res_ref=<%= var.scaling_res_ref_py_value %><%= @impl.use_units && !var.units.blank? ? ", units='#{var.units}'":"" %>)
<%- end -%>
<%- end -%>
        self.declare_partials('*', '*')

    def compute(self, inputs, outputs):
        inputs_gp = np.array([])
        random_inputs = []
<% disc.impl.numeric_output_vars.each do |v| %>
        random_inputs.append('_xi_<%= v.py_varname %>')
<% end %>
        for name in sorted(inputs.keys()):
            if name not in random_inputs: 
                inputs_gp = np.concatenate((inputs_gp, inputs[name].flatten()))
        inputs_gp = np.atleast_2d(inputs_gp)    
<% disc.impl.numeric_output_vars.each do |v|%>
        sigma = np.sqrt(self.gp_<%= v.py_varname %>.predict_variances(inputs_gp))
        mean = self.gp_<%= v.py_varname %>.predict_values(inputs_gp)
        outputs['<%= v.py_varname %>'] = mean + inputs['_xi_<%= v.py_varname %>'] * sigma 
<%- end -%>

    def compute_partials(self, inputs, partials):
        """ Jacobian for Discipline1 """
<%- disc.impl.numeric_output_vars.each do |var_out| -%>
<%- disc.impl.numeric_input_vars.each do |var_in| -%>
        partials['<%= var_out.py_varname %>', '<%= var_in.py_varname %>'] = np.zeros((<%= var_out.dim %>, <%= var_in.dim %>))
<%- end -%>
<%- disc.impl.numeric_output_vars.each do |var_in| -%>
        partials['<%= var_out.py_varname %>', '_xi_<%= var_in.py_varname %>'] = np.zeros((<%= var_out.dim %>, <%= var_in.dim %>))
<%- end -%>
<%- end -%>

        inputs_gp = np.array([])
        random_inputs = []

<%- disc.impl.numeric_output_vars.each do |v| -%>
        random_inputs.append('_xi_<%= v.py_varname %>')
<%- end -%>

        for name in sorted(inputs.keys()):
            if name not in random_inputs: 
                inputs_gp = np.concatenate((inputs_gp, inputs[name].flatten()))
        inputs_gp = np.atleast_2d(inputs_gp)

<%- disc.impl.numeric_output_vars.each do |v| -%>
        i = 0
        sigma = np.sqrt(self.gp_<%= v.py_varname %>.predict_variances(inputs_gp))
        d_sigma = self.gp_<%= v.py_varname %>.predict_variance_derivatives(inputs_gp)/(2.0*sigma)
        for name in sorted(inputs.keys()):
            if name in random_inputs:
                sigma = np.sqrt(self.gp_<%= v.py_varname %>.predict_variances(inputs_gp))
                partials['<%= v.py_varname %>','_xi_<%= v.py_varname %>'] = sigma
            else:
                dim = partials['<%= v.py_varname %>', name].shape[1]
                for j in range(dim):
                    d_mean = self.gp_<%= v.py_varname %>.predict_derivatives(inputs_gp, i)
                    partials['<%= v.py_varname %>', name][0, j] = d_mean + inputs['_xi_<%= v.py_varname %>'] * d_sigma[0, i]
                    i = i + 1
<%- end -%>

<%- end -%>
<%- end -%>
<%- end -%>


class <%= @impl.py_classname %>RandomAnalysis(<%= @impl.parallel_group ? "om.ParallelGroup" : "om.Group" %>):
    """ An OpenMDAO base component to encapsulate <%= @impl.py_classname %> random MDA """
    def __init__(self, discipline_factory, gp_factory, **kwargs):
        super(). __init__(**kwargs)
        self.disc_factory = discipline_factory
        self.gp_factory = gp_factory

        self.nonlinear_solver = NewtonSolver(solve_subsystems=False)
<% unless @impl.nonlinear_solver.runonce? -%>
        self.nonlinear_solver.options['atol'] = <%= @impl.nonlinear_solver.atol %>
        self.nonlinear_solver.options['rtol'] = <%= @impl.nonlinear_solver.rtol %>
        self.nonlinear_solver.options['err_on_non_converge'] = <%= @impl.to_code(:nonlinear_solver, :err_on_non_converge) %>
        self.nonlinear_solver.options['iprint'] = <%= @impl.nonlinear_solver.iprint %>
        self.nonlinear_solver.options['maxiter'] = <%= @impl.nonlinear_solver.maxiter %>
<% end -%>

        self.linear_solver = <%= @impl.linear_solver.name %>()
        self.linear_solver.options['atol'] = <%= @impl.linear_solver.atol %>
        self.linear_solver.options['rtol'] = <%= @impl.linear_solver.rtol %>
        self.linear_solver.options['err_on_non_converge'] = <%= @impl.to_code(:linear_solver, :err_on_non_converge) %>
        self.linear_solver.options['iprint'] = <%= @impl.linear_solver.iprint %>
        self.linear_solver.options['maxiter'] = <%= @impl.linear_solver.maxiter %>

    def setup(self):
<%- @mda.input_variables.each do |dv| -%>
        self.set_input_defaults('<%= dv.name %>', val=<%= dv.init_py_value %><%= @impl.use_units && !dv.units.blank? ? ", units='#{dv.units}'":"" %>)
<%- end -%>
<%- @mda.egmdo_random_variables.each do |v| -%>
        self.set_input_defaults('_xi_<%= v.name %>', val=0.0)
<%- end -%>

<%- @mda.plain_disciplines.each do |disc| -%>
<%- if disc.impl.egmdo_surrogate -%>
        name = '<%= disc.impl.py_classname %>Random'
        disc = <%= disc.impl.py_classname %>RandomDiscipline(self.gp_factory)
<%- else -%>
        name = '<%= disc.impl.py_classname %>'
        disc = self.disc_factory.create_<%= disc.impl.snake_modulename %>()
<%- end -%>
        self.add_subsystem(name, disc, promotes=['*'])
<%- end -%>

