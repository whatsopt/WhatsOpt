import os
import numpy as np
import pickle
from smt.surrogate_models import KRG
from <%= @pkg_prefix %>egmdo.doe_factory import DoeFactory

class GpFactory:

    def __init__(self, doe_factory, outdir="."):
        self.doe_factory = doe_factory
        self.outdir = outdir

    def gp_filename(self, disc_name, var_name):
        return os.path.join(self.outdir, f"gp_<%= @impl.snake_modulename %>_{disc_name}_{var_name}.pkl")

<%- @mda.egmdo_random_disciplines.each do |disc| -%>
<%- outdim = Analysis.vars_dim(disc.output_variables) -%>
<% disc.output_variables.each_with_index do |v, i| %>
    def create_gp_<%= disc.impl.snake_modulename %>_<%= v.py_varname %>(self, n_cases=4):
        # load or create the DoE 
        doe_file = self.doe_factory.doe_numpy_filename("<%= disc.impl.snake_modulename %>")
        if (not os.path.exists(doe_file)):
            print(f"Create DOE for '<%= disc.name %>' with {n_cases} samples: {doe_file}")
            self.doe_factory.create_doe_<%= disc.impl.snake_modulename %>(n_cases)
        doe = np.load(doe_file)

        # create the gp surrogate model
        gp_file = self.gp_filename("<%= disc.impl.snake_modulename %>", "<%= v.py_varname %>")
        print(f"Build GP for '<%= disc.name %>' : {gp_file}")
        input_dim=<%= disc.input_variables.map(&:dim).inject(0, :+) %>
        gp = KRG(theta0=[1e-2] * input_dim, print_global=False)
        gp.set_training_values(doe[:, :-<%= outdim %>], doe[:, -<%= outdim-i %>])
        gp.train()
        with open(gp_file, "wb") as f:
            pickle.dump(gp, f)

    def update_gp_<%= disc.impl.snake_modulename %>_<%= v.py_varname %>(self, design_vars, coupling_vars):
        print(f"Update DOE for '<%= disc.name %>'")
        new_doe = self.doe_factory.update_doe_<%= disc.impl.snake_modulename %>(design_vars, coupling_vars)
        self.create_gp_<%= disc.impl.snake_modulename %>_<%= v.py_varname %>()
        return new_doe
<%- end -%>
<%- end -%>

    def create_all_gps(self, n_cases=4):
    <%- if @mda.egmdo_random_disciplines.size < 2 -%>
        print("Error: You have to select two disciplines as surrogates then update the EGMDO code and retry.")
        exit(-1)
    <%- end -%>
    <%- @mda.egmdo_random_disciplines.each do |disc| -%>
    <%- disc.output_variables.each do |v| -%>
        self.create_gp_<%= disc.impl.snake_modulename %>_<%= v.py_varname %>(n_cases)
    <%- end -%>
    <%- end -%>
    
