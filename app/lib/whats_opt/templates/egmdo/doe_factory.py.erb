import os
import numpy as np
from numpy import nan, inf
import matplotlib.pyplot as plt

import openmdao.api as om
from openmdao_extensions.smt_doe_driver import SmtDOEDriver
from openmdao.utils.mpi import MPI

class DoeFactory:
    def __init__(self, discipline_factory, outdir=".", plot=False):
        self.discipline_factory = discipline_factory
        self.outdir = outdir
        self.plot = plot
        self.comm = None
        if MPI:
            rank = MPI.COMM_WORLD.rank
            self.comm = MPI.COMM_WORLD.Split(rank) # force to run only on one proc in MPI context  

    def doe_recorder_filename(self, disc_name):
        return os.path.join(self.outdir, f"doe_<%= @mda.snake_modulename %>_{disc_name}.sqlite")

    def doe_numpy_filename(self, disc_name):
        return os.path.join(self.outdir, f"doe_<%= @mda.snake_modulename %>_{disc_name}.npy")

<%- @mda.plain_disciplines.each do |disc| -%>
<%- if disc.impl.egmdo_surrogate? -%>
    def create_doe_<%= disc.impl.snake_modulename %>(self, n_cases):
        pb = om.Problem(comm=self.comm)
        pb.model.add_subsystem("<%= disc.impl.py_classname %>", self.discipline_factory.create_<%= disc.impl.snake_modulename %>(), promotes=['*'])
        pb.driver = SmtDOEDriver(
            sampling_method_name="LHS",
            n_cases=n_cases,
            sampling_method_options={"criterion": "ese"},
        )
        pb.driver.options["run_parallel"] = False

        recorder = om.SqliteRecorder(self.doe_recorder_filename("<%= disc.impl.snake_modulename %>"), record_viewer_data=False)
        pb.driver.add_recorder(recorder)
        pb.driver.recording_options["includes"] = ["*"]
        <%- disc.impl.numeric_input_vars.each do |v| -%>
        <%- refvar = @mda.variable(v.name) -%>
<%- if @mda.is_parameter?(v.name) -%>
        <%- lower = refvar.init_py_value -%>
        <%- upper = refvar.init_py_value -%>
<%- else -%>
        <%- lower = refvar.lower_py_value -%>
        <%- upper = refvar.upper_py_value -%>
        <%- if lower=="-inf" || upper=="inf" -%>
        print("Error: You have to specify bounds for '<%= v.name %>' variable then update the EGMDO code and retry.")
        exit(-1)
        <%- end -%>
<%- end -%>
        pb.model.add_design_var('<%= v.name %>', lower=<%= lower %>, upper=<%= upper %>)
        <%- end -%>

        pb.setup()
        pb.run_driver()
        pb.cleanup()

        # read the doe
        cr = om.CaseReader(self.doe_recorder_filename("<%= disc.impl.snake_modulename %>"))
        driver_cases = cr.list_cases("driver", out_stream=None)
        case = cr.get_case(driver_cases[0])
        n_doe = len(driver_cases)
        dim = <%= disc.variables.map(&:dim).inject(0, :+) %>
        doe = np.zeros((n_doe, dim))
        
        for i in range(n_doe):
            case = cr.get_case(driver_cases[i])
<%- index = 0 -%>
<%- (disc.impl.numeric_input_vars + disc.impl.numeric_output_vars).each_with_index do |var, i| -%>
            doe[i, <%= index %>:<%= index + var.dim %>] = case.outputs['<%= var.name %>']
<%- index = index + var.dim -%>
<%- end -%>
        # save the DoE for futur enrichement
        np.save(self.doe_numpy_filename("<%= disc.impl.snake_modulename %>"), doe)

        print(doe) 
<% input_size = (disc.impl.numeric_input_vars).inject(0){|acc, v| acc + v.dim } %>
<% size_limit = 10 %>
        input_size = <%= input_size %>
        plot_disabled = (input_size > <%= size_limit %>)
        if self.plot and plot_disabled:
            print(f"Plot disabled as {input_size} is too large (> <%= size_limit %>)")
<% if input_size < size_limit %>
        if self.plot:
<%- (disc.impl.numeric_output_vars).each_with_index do |var, i| -%>
            for i in range(dim-1):
                plt.subplot(1, dim-1, i + 1)
                plt.plot(doe[:, i], doe[:, -1], 'o')
                if i == 0:
                    plt.ylabel('<%= var.name %>')
<%- v_index = 0 -%>
<%- (disc.impl.numeric_input_vars).each_with_index do |v, j| -%>
<%- (0...v.dim).each do |j| -%> 
                if i == <%= v_index + j %>:
                    plt.xlabel('<%= v.dim > 1 ? "#{v.name}[#{j}]" : v.name %>')
<%- end -%>
<%- v_index = v_index + v.dim -%>
<%- end -%>
<%- end -%>
            plt.show()
<%- end %>
    def update_doe_<%= disc.impl.snake_modulename %>(self, design_vars, coupling_vars):
        # open the disciplinary DoE
        doe = np.load(self.doe_numpy_filename("<%= disc.impl.snake_modulename %>"))
        new_doe = np.zeros((doe.shape[0] + 1, doe.shape[1]))
        new_doe[:doe.shape[0], :] = doe

        # open the sqlite dictionnary to find the index of the variables
        filename = self.doe_recorder_filename("<%= disc.impl.snake_modulename %>")
        cr = om.CaseReader(filename)
        driver_cases = cr.list_cases('driver', out_stream=None)
        case = cr.get_case(driver_cases[0])
        n_design_vars = len(case.get_design_vars()) 
        design_vars_names = sorted(case.get_design_vars())

        # print("design_vars_names=", design_vars_names)
        dim_design_vars = [0]
        for i in range(n_design_vars):
            dim_design_vars.append(len(case.get_design_vars()[design_vars_names[i]]))

        problem = om.Problem(comm=self.comm)
        problem.model.add_subsystem("<%= disc.impl.py_classname %>", self.discipline_factory.create_<%= disc.impl.snake_modulename %>(), promotes=["*"])
        problem.setup()
        <%- disc.design_variables.each do |var| -%>
        problem['<%= var.py_varname %>'] = design_vars['<%= var.py_varname %>']
        <%- end -%>
        <%- disc.input_coupling_variables.each do |var| -%>
        problem['<%= var.py_varname %>'] = coupling_vars['<%= var.py_varname %>']
        <%- end -%>

        # run the analysis
        problem.run_model()

        list_inputs = problem.model.list_inputs(out_stream=None, prom_name=True)
        # update the DoE with the new inputs and update the inputs of the problem with 
        # the correct value of the coupling variables

        for inp in list_inputs:
            name = inp[1]['prom_name']
            ind = design_vars_names.index(name)
            start = int(np.array(dim_design_vars[:ind + 1]).sum())
            # we look for inp in the dict coupling_vars
            if name in coupling_vars: 
                new_doe[-1, start:start + dim_design_vars[ind + 1]] = coupling_vars[name]
            else:
                new_doe[-1, start:start + dim_design_vars[ind + 1]] = design_vars[name]

        <%- count = disc.impl.numeric_output_vars.size -%>
        <%- disc.impl.numeric_output_vars.each_with_index do |var, i| -%>
        new_doe[-1, -<%= count - i %>] = problem.model.list_outputs(out_stream=None)[<%= i %>][1]['val']
        <%- end -%>

        # save the DoE 
        np.save(self.doe_numpy_filename("<%= disc.impl.snake_modulename %>"), new_doe)

        return new_doe
<% end -%>
<%- end -%>

def create_all_does(discipline_factory, n_cases=4):
<%- @mda.plain_disciplines.each do |disc| -%>
<%- if disc.impl.egmdo_surrogate -%>
    DoeFactory(discipline_factory).create_doe_<%= disc.impl.snake_modulename %>(n_cases)
<%- end -%>
<%- end -%>
<%- if @mda.disciplines.nodes.select{|d| d.impl.egmdo_surrogate}.empty? -%>
    pass
<%- end -%>