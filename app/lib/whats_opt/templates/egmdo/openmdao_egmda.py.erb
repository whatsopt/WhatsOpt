import numpy as np
from numpy import nan, inf

import openmdao.api as om
from mda_init import initialize
from <%= @pkg_prefix %><%= @impl.py_modulename %> import <%= @impl.py_classname %>Factory as DisciplineFactory
from <%= @pkg_prefix %>egmdo.random_vec_analysis import <%= @impl.py_classname %>RandomVecAnalysis
from <%= @pkg_prefix %>egmdo.random_analysis import <%= @impl.py_classname %>RandomAnalysis
from <%= @pkg_prefix %>egmdo.doe_factory import DoeFactory
from <%= @pkg_prefix %>egmdo.gp_factory import GpFactory
from <%= @pkg_prefix %>egmdo.algorithms import solve_egmda

class <%= @impl.py_classname %>EgDiscipline(om.ExplicitComponent):
    """ An OpenMDAO base component to encapsulate <%= @impl.py_classname %> discipline """

    def __init__(self, discipline_factory, gp_factory, 
                 n_doe_pce=500, epsilon_coeff_var=1e-3, threshold_coeff_var=1e-3, n_iter_max=10, 
                 parallel=False, outdir=".", plot=False, plot_range=[0, 50]):
        super().__init__()
        self.plot=plot
        self.n_doe_pce = n_doe_pce
        self.epsilon_coeff_var = epsilon_coeff_var
        self.threshold_coeff_var = threshold_coeff_var
        self.n_iter_max = n_iter_max
        self.parallel = parallel
        self.plot = plot
        self.plot_range = plot_range
        self.outdir=outdir
        self.discipline_factory = discipline_factory
        self.gp_factory = gp_factory
         
    def setup(self):
<% @mda.input_variables.each do |var| -%>
        self.add_input('<%= var.py_varname %>', val=<%= var.init_py_value %>, desc='<%= var.escaped_desc %>'<%= @impl.use_units && !var.units.blank? ? ", units='#{var.units}'":"" %>)
<% end %>
<% @mda.output_variables.each do |var| -%>
        self.add_output('<%= var.py_varname %>', val=<%= var.init_py_value %>, desc='<%= var.escaped_desc %>'<%= @impl.use_units && !var.units.blank? ? ", units='#{var.units}'":"" %>)
<% end %>
        self.declare_partials('*', '*')

    def compute(self, inputs, outputs):
        design_vars={}
<% @mda.input_variables.each do |var| -%>
        design_vars['<%= var.name %>'] = inputs['<%= var.name %>']
<% end %>
        # This function enrich the disciplinary surrogate models until the convergence on the fixed point is reached
        solve_egmda(
            self.discipline_factory,
            self.gp_factory,
            design_vars,
            n_doe_pce=self.n_doe_pce,  
            epsilon_coeff_var=self.epsilon_coeff_var,
            threshold_coeff_var=self.threshold_coeff_var,
            n_iter_max=self.n_iter_max,
            plot=self.plot,
            plot_range=self.plot_range,
            outdir=self.outdir,
            parallel=self.parallel
        )

        # After the convergence we run the problem at the mean value of the disciplinary 
        # surrogate models to fill the outputs
        pb = om.Problem(<%= @impl.py_classname %>RandomVecAnalysis(self.discipline_factory, self.gp_factory))
        # pb.model.nonlinear_solver.options['err_on_non_converge'] = False
        # pb.model.linear_solver.options['err_on_non_converge'] = False
        pb.model.nonlinear_solver.options['iprint'] = 0
        pb.model.linear_solver.options['iprint'] = 0
        pb.setup()
<% @mda.input_variables.each do |var| -%>
        pb['<%= var.name %>'] = inputs['<%= var.name %>']
<% end %>
        pb.run_model()
<% @mda.output_variables.each do |var| -%>
        outputs['<%= var.name %>'] = pb['<%= var.name %>'].mean()
<% end %>

    def compute_partials(self, inputs, partials):
        pb = om.Problem(<%= @impl.py_classname %>RandomAnalysis(self.discipline_factory, self.gp_factory))
        # pb.model.nonlinear_solver.options['err_on_non_converge'] = False
        # pb.model.linear_solver.options['err_on_non_converge'] = False
        pb.model.nonlinear_solver.options['iprint'] = 0
        pb.model.linear_solver.options['iprint'] = 0
        pb.setup()
<%- @mda.input_variables.each do |var| -%>
        pb['<%= var.name %>'] = inputs['<%= var.name %>']
<%- end -%>
        pb.run_model()

<%- @mda.output_variables.each do |var_out| -%>
<%- @mda.input_variables.each do |var_in| -%>
        partials['<%= var_out.py_varname %>', '<%= var_in.py_varname %>'] = pb.compute_totals('<%= var_out.py_varname %>', '<%= var_in.py_varname %>')[('<%= var_out.py_varname %>', '<%= var_in.py_varname %>')]
<%- end -%>
<%- end -%>


class <%= @impl.py_classname %>Egmda(om.Group):
    """ An OpenMDAO base component to encapsulate <%= @impl.py_classname %> EGMDA """
    def __init__(self, discipline_factory=None, gp_factory=None, 
                 n_doe_pce=500, epsilon_coeff_var=1e-3, threshold_coeff_var=1e-3, n_iter_max=10, 
                 parallel=False, outdir='<%= @outdir %>', plot=False, plot_range=[0, 50]):
        super().__init__()
        self.n_doe_pce = n_doe_pce
        self.epsilon_coeff_var = epsilon_coeff_var
        self.threshold_coeff_var = threshold_coeff_var
        self.n_iter_max = n_iter_max
        self.parallel = parallel
        self.plot = plot
        self.plot_range = plot_range
        self.outdir = outdir
        self.discipline_factory = discipline_factory
        if not discipline_factory:
            self.discipline_factory = DisciplineFactory()
        self.gp_factory = gp_factory
        if not gp_factory:
            self.gp_factory = GpFactory(DoeFactory(self.discipline_factory, plot=plot, outdir=outdir), outdir=outdir)

    def setup(self):
<%- @mda.input_variables.each do |dv| -%>
        self.set_input_defaults('<%= dv.name %>', val=<%= dv.init_py_value %><%= @impl.use_units && !dv.units.blank? ? ", units='#{dv.units}'":"" %>)
<%- end %>
        self.add_subsystem('<%= @impl.py_classname %>', 
                           <%= @impl.py_classname %>EgDiscipline(
                                discipline_factory=self.discipline_factory, gp_factory=self.gp_factory, 
                                n_doe_pce=self.n_doe_pce, epsilon_coeff_var=self.epsilon_coeff_var,
                                threshold_coeff_var=self.threshold_coeff_var, parallel=self.parallel, 
                                n_iter_max=self.n_iter_max, outdir=self.outdir,
                                plot=self.plot, plot_range=self.plot_range),
                           promotes=[<%= (@mda.input_variables+@mda.output_variables).map(&:py_varname).uniq.map{|v| "'#{v}'"}.join(', ') %>])

