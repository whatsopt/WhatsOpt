import numpy as np
from numpy import nan, inf
import matplotlib.pyplot as plt
from optparse import OptionParser
import openmdao.api as om
<% if @mda.mixint? %>
from openmdao_extensions.egobox_doe_driver import EgoboxDOEDriver
<% else %>
from openmdao_extensions.smt_doe_driver import SmtDOEDriver
<% end %>
<%- if @egmdo -%>
from openmdao.utils.mpi import MPI
from <%= @pkg_prefix %><%= @egmdo_module %>.<%= @mda.py_modulename %>_egmda import <%= @mda.py_classname %>Egmda as <%= @mda.py_classname %>
<%- if @remote -%>
from <%= @pkg_prefix %><%= @server_module %>.<%= @mda.py_modulename %>_proxy import <%= @mda.py_classname %>Proxy
<%- end -%>
<%- elsif @remote -%>
from <%= @pkg_prefix %><%= @server_module %>.<%= @mda.py_modulename %>_proxy import <%= @mda.py_classname %>Proxy as <%= @mda.py_classname %>
<%- else -%>
from <%= @pkg_prefix %><%= @mda.py_modulename %> import <%= @mda.py_classname %>
<%- end -%>
from mda_init import initialize

# Command options
parser = OptionParser()
parser.add_option("--plot",
                  action="store_true", dest="plot", default=False,
                  help="Display scatter plots")
parser.add_option("-n", "--ncases", type="int",
                  dest="n_cases", default=<%= @driver.options[:nbpts]%>,
                  help="number of samples")
<%- if not @egmdo -%>
parser.add_option("--parallel", default=False,
                  action="store_true",
                  help="run doe in parallel")
<%- end -%>
(options, args) = parser.parse_args()

# Problem definition
<%- if @egmdo -%>
<%- if @remote -%>
pb = om.Problem(<%= @mda.py_classname %>(discipline_factory=<%= @mda.py_classname %>Proxy(), plot=options.plot))
<%- else -%>
# Options: discipline_factory=None, gp_factory=None, 
# n_doe_pce=500, epsilon_coeff_var=1e-3, threshold_coeff_var=1e-3, n_iter_max=10, 
# parallel=False, outdir=".", plot=False, plot_range=[0, 50]
parallel = (MPI is not None and MPI.COMM_WORLD.size > 1)
pb = om.Problem(<%= @mda.py_classname %>(parallel=parallel, plot=options.plot))
<% end %>
<%- else -%>
pb = om.Problem(<%= @mda.py_classname %>())
<%- end -%>

<%- if @mda.mixint? -%>
pb.driver = EgoboxDOEDriver(n_cases=options.n_cases)
<%- else -%>
pb.driver = SmtDOEDriver(sampling_method_name='LHS', n_cases=options.n_cases,
                         sampling_method_options={'criterion': 'ese'})
<%- end -%>
<%- if not @egmdo -%>
pb.driver.options['run_parallel'] = options.parallel
<%- end -%>

<%= @generator.render_partial('recorder_partial.py.erb') %>

# Design variables 
<%- if @mda.design_variables.empty? -%>
print("Error: You have to specify some design variables then update the run_doe.py script and retry.")
exit(-1)
<%- end -%>
<%- @mda.design_variables.each do |dv| -%>
<%- if dv.lower_py_value == "-inf" ||  dv.upper_py_value == "inf" -%>
print("Error: You have to set bounds to the '<%= dv.name %>' design variable then update the run_doe.py script and retry.")
exit(-1)
<%- end -%>
pb.model.add_design_var('<%= dv.name %>', lower=<%= dv.lower_py_value %>, upper=<%= dv.upper_py_value %><%= @impl.use_units && !dv.units.blank? ? ", units='#{dv.units}'":"" %>)
<%- end -%>

# Run DOE 
pb.setup()
initialize(pb)

pb.run_driver()

<%- if (@mda.response_dim * @mda.design_var_dim) < 10 -%>
# Scatter plots
if options.plot:
    reader = om.CaseReader(case_recorder_filename)
    cases = reader.list_cases('driver')
    n = len(cases)
    data = {'inputs': {}, 'outputs': {}}
    <% @mda.design_variables.each do |dv| %>
    data['inputs']['<%= dv.name %>'] = np.zeros((n,)+<%= dv.shape=="1" ? "(1,)":dv.shape %>)<% end %>
    <% @mda.response_variables.each do |r| %>
    data['outputs']['<%= r.name %>'] = np.zeros((n,)+<%= r.shape=="1" ? "(1,)":r.shape %>)<% end %>

    for i in range(len(cases)):
        case = reader.get_case(cases[i])
    <%- @mda.design_variables.each do |dv| -%>
        data['inputs']['<%= dv.name %>'][i, :] = case.outputs['<%= dv.name %>']
    <%- end %>
    <%- @mda.response_variables.each do |r| -%>
        data['outputs']['<%= r.name %>'][i, :] = case.outputs['<%= r.name %>']
    <%- end %>

    <%- row = 0 -%>
    <%- @mda.response_variables.each_with_index do |r, j| -%>
    output = data['outputs']['<%= r.name %>'].reshape(-1)
    <%- (0...r.dim).each do |kj| -%>
    <%- col = 0 -%>
    <%- @mda.design_variables.each_with_index do |dv, i| %>
    input = data['inputs']['<%= dv.name %>'].reshape(-1)
    <%- (0...dv.dim).each do |ki| -%>
    plt.subplot(<%= @mda.response_dim %>, <%= @mda.design_var_dim %>, <%= @mda.design_var_dim*row+col+1 %>)
    plt.plot(input[<%= ki %>::<%= dv.dim %>], output[<%= kj %>::<%= r.dim %>], '.')
    <%- if col == 0 -%>
    plt.ylabel('<%= r.dim==1?"#{r.name}":"#{r.name} #{kj}" %>')
    <%- end -%>
    <%- if true or row == @mda.output_dim-1 -%>
    plt.xlabel('<%= dv.dim==1?"#{dv.name}":"#{dv.name} #{ki}" %>')
    <%- end -%>
    <%- col += 1 -%>
    <%- end -%>
    <%- end -%>
    <%- row += 1 -%>
    <%- end -%>

    <%- end -%>
    plt.show()
<%- else -%>
if options.plot:
    print("Scatter plots disabled. Too many variables to be displayed.")
<% end -%>
