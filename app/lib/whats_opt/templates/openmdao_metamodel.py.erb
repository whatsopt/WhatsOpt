import os
import re
import numpy as np
import requests
import json

from urllib.parse import urlparse

<% unless @remote %>
WHATSOPT_DIRNAME = os.path.join(os.path.expanduser('~'), '.whatsopt')
API_KEY_FILENAME = os.path.join(WHATSOPT_DIRNAME, 'api_key')
<% end %>

from <%= @pkg_prefix %><%= @discipline.impl.py_full_modulename %>_base import <%= @discipline.impl.py_classname %>Base

class <%= @discipline.impl.py_classname %>(<%= @discipline.impl.py_classname %>Base):
    """ An OpenMDAO metamodel for <%= @discipline.impl.py_classname %> discipline """
		
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.url = "<%= @whatsopt_url %>/api/v1/meta_models/<%= @discipline.meta_model.id %>"
        self.session = requests.Session()  
        urlinfos = urlparse(self.url)
        self.session.trust_env = re.match(r"\w+.onera\.fr", urlinfos.netloc)
        <% if @remote %>
        self.api_key = "<%= @api_key %>"
        <% else %>
        with open(API_KEY_FILENAME, 'r') as f:
            self.api_key = f.read()
        <% end %>
        self.headers = {'Authorization': 'Token token=' + self.api_key, 'User-Agent': 'metamodel'}

    def compute(self, inputs, outputs):
        """ <%= @discipline.impl.py_classname %> metamodel computation """
        sample = <%= @discipline.impl.py_classname %>._to_json_param(inputs)
        resp = self.session.put(self.url, headers=self.headers, 
            json={"meta_model": { "x": sample }})
        if resp.ok:
            meta_outputs = {}
            # depend on how OpenMDAO component is initialized 
            if self._static_var_rel_names['output']:  # used in server with distant problem (init as standalone)
                outnames = self._static_var_rel_names['output']
                meta = self._static_var_rel2meta
            else: # else locally in local problem (normal init with group)
                outnames = self._var_rel_names['output']
                meta = self._var_rel2meta
            for name in outnames:
                meta_outputs[name] = meta[name]
            <%= @discipline.impl.py_classname %>._from_json_responses(meta_outputs, resp.json()["y"], outputs)
        else:
            resp.raise_for_status()

    @staticmethod
    def _to_json_param(inputs):
        parts = []
        for k in sorted(inputs):
            parts.append(np.copy(inputs[k]).reshape(-1))
        sample = np.concatenate(parts)
        return [list(sample)]

    @staticmethod
    def _from_json_responses(meta_outputs, responses, outputs):
        index = 0
        for k in sorted(meta_outputs):
            shp = meta_outputs[k]['shape']
            if isinstance(meta_outputs[k], np.ndarray):
                size = meta_outputs[k]['size']
            else:
                size = 1
            outputs[k] = np.array(responses[0][index:index+size]).reshape(shp)
            index += size
