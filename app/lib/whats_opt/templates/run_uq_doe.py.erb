import numpy as np
from numpy import nan, inf
import matplotlib.pyplot as plt
from mda_init import initialize

import openmdao.api as om
from openmdao_extensions.openturns_doe_driver import OpenturnsDOEDriver

import openturns as ot
<% if @remote -%>
from <%= @pkg_prefix %><%= @server_module %>.<%= @impl.py_modulename %>_proxy import <%= @impl.py_classname %>Proxy as <%= @impl.py_classname %> 
<% else -%>
from <%= @pkg_prefix %><%= @impl.py_modulename %> import <%= @impl.py_classname %> 
<% end %>
from optparse import OptionParser
parser = OptionParser()
parser.add_option("-n", "--ncases", type="int",
                  dest="n_cases", default=<%= @driver.options[:nbpts]%>,
                  help="number of samples")
parser.add_option("-p", "--parallel", 
                  action="store_true", default=False,
                  help="run doe in parallel")
(options, args) = parser.parse_args()

pb = om.Problem(<%= @impl.py_classname %>())
dists = []
<% @mda.uncertain_input_variables.each do |uv| -%>
<% uv.distributions.each.with_index do |_, i| %>
# <%= uv.name %><%= "[#{i}]" if uv.distributions.size>1 %> 
dists.append(ot.<%= uv.distribution_py(i) %>)<%- end %><%- end %>

<% dim = Analysis.vars_dim(@mda.uncertain_input_variables) -%>
# Dependency between variables can be specified by choosing a specific copula
copula = ot.IndependentCopula(<%= dim %>)  # default to no dependency
# # Normal copula
# R = ot.CorrelationMatrix(<%= dim %>)
# R[i, j] = ... where 0 <= i < j < <%= dim %> to specify dependency between var(i) and var(j)
# copula = ot.NormalCopula(R)

comp_dist = ot.ComposedDistribution(dists, copula)
pb.driver = OpenturnsDOEDriver(n_samples=options.n_cases, distribution=comp_dist)
pb.driver.options['run_parallel'] = options.parallel

case_recorder_filename = '<%= @sqlite_filename %>'        
recorder = om.SqliteRecorder(case_recorder_filename)
pb.driver.add_recorder(recorder)
pb.driver.recording_options['includes'] = ['*']

# Uncertain variable input are taken as design_variables to get recorded by driver recorder
<%- @mda.uncertain_input_variables.each do |dv| %>
pb.model.add_design_var('<%= dv.name %>', lower=<%= dv.lower_py_value %>, upper=<%= dv.upper_py_value %>)<% end %>

pb.setup()  
initialize(pb)

pb.run_driver()        

