<%= @generator.render_partial('base_header_partial.py.erb') %>

from os import path
import inspect
import numpy as np
from numpy import nan

<% @mda.all_plain_disciplines.each do |disc| -%>
from <%= disc.impl.py_full_modulename %> import <%= disc.impl.py_classname %>
<% end -%>

from gemseo.mda.jacobi import MDAJacobi
from gemseo.core.doe_scenario import DOEScenario
from gemseo.core.mdo_scenario import MDOScenario
from gemseo.core.discipline import MDODiscipline
from gemseo.core.json_grammar import JSONGrammar
from gemseo.algos.design_space import DesignSpace

class <%= @impl.py_classname %>MDABase(MDAJacobi):
    def __init__(self, dtype="float64", **mda_options):
        disciplines = [
            <%= @mda.disciplines.nodes.map{|disc| "self.create_#{disc.impl.basename}()"}.join(', ') %>
        ]
        super().__init__(disciplines, **mda_options)

    def _instantiate_grammars(self, input_grammar_file, output_grammar_file, grammar_type=MDODiscipline.JSON_GRAMMAR_TYPE):
        self.default_inputs = {<% @mda.input_variables.each do |var| %>
            '<%= var.py_varname %>': np.atleast_1d(<%= var.init_py_value %>),<% end -%>

        }
        self.default_outputs = {<% @mda.output_variables.each do |var| %>
            '<%= var.py_varname %>': np.atleast_1d(<%= var.init_py_value %>),<% end -%>

        }
        self.input_grammar = JSONGrammar("<%= @discipline.impl.py_classname %>")
        self.input_grammar.initialize_from_base_dict(self.default_inputs)
        self.output_grammar = JSONGrammar("<%= @discipline.impl.py_classname %>")
        self.output_grammar.initialize_from_base_dict(self.default_outputs)

<% @mda.plain_disciplines.each do |disc| -%>
    def create_<%= disc.impl.basename %>(self):
    	return <%= disc.impl.py_classname %>()
<% end %>

class <%= @impl.py_classname %>DesignSpace(DesignSpace):
    """**<%= @impl.py_classname %>DesignSpace** creates the :class:`.DesignSpace` of the
    <%= @impl.py_classname %> problem"""

    def __init__(self):
        super().__init__()

        # Initial solution<% @mda.input_variables.each do |dv| %>
        <%= dv.name %> = np.atleast_1d(<%= dv.init_py_value %>)<% end -%>


        # Design variables<% @mda.design_variables.each do |dv| %>
        self.add_variable("<%= dv.name %>", <%= dv.dim %>, l_b=<%= dv.lower_py_value %>, u_b=<%= dv.upper_py_value %>, value=<%= dv.name %>)<% end -%>


class <%= @impl.py_classname %>DOEScenarioBase(DOEScenario):
    """ A base class for <%= @impl.py_classname %> DOE Scenario """

    def __init__(self, **kwargs):

        self._disciplines = [
            <%= @mda.disciplines.nodes.map{|d| "self.create_#{d.impl.basename}()"}.join(', ') %>
        ]
        for disc in self._disciplines:
            disc.set_jacobian_approximation()
        self._formulation = "MDF"
        self._objective_name =  "<%= @mda.has_objective? ? @mda.min_objective_variables.first.name : 'NO_OBJECTIVE_ERROR' %>"
        self._design_space = <%= @impl.py_classname %>DesignSpace()
        self._name = "<%= @impl.py_classname %>DOEScenario"

        super().__init__(
            self._disciplines,
            self._formulation,
            self._objective_name,
            self._design_space,
            self._name,
            **kwargs,
        )

    def _init_base_grammar(self, name):
        name = "DOEScenario"
        self.comp_dir = path.dirname(inspect.getfile(DOEScenario))
        input_grammar_file = self.auto_get_grammar_file(True, name, self.comp_dir)
        output_grammar_file = self.auto_get_grammar_file(False, name, self.comp_dir)
        self._instantiate_grammars(input_grammar_file, output_grammar_file)

<% @mda.plain_disciplines.each do |disc| -%>
    def create_<%= disc.impl.basename %>(self):
    	return <%= disc.impl.py_classname %>()
<% end %>


class <%= @impl.py_classname %>MDOScenarioBase(MDOScenario):
    """ A base class for <%= @impl.py_classname %> MDO Scenario """

    def __init__(self, **kwargs):

        self._disciplines = [
            <%= @mda.disciplines.nodes.map{|d| "self.create_#{d.impl.basename}()"}.join(', ') %>
        ]
        for disc in self._disciplines:
            disc.set_jacobian_approximation()
        self._formulation = "MDF" 
        self._objective_name =  "<%= @mda.has_objective? ? @mda.min_objective_variables.first.name : 'NO_OBJECTIVE_ERROR' %>" 
        self._design_space = <%= @impl.py_classname %>DesignSpace()
        self._name = "<%= @impl.py_classname %>MDOScenario"

        super().__init__(
            self._disciplines,
            self._formulation,
            self._objective_name,
            self._design_space,
            self._name,
            **kwargs,
        )
        <% @mda.neg_constraint_variables.each do |voi| %>
        self.add_constraint('<%= voi.name %>', constraint_type="ineq", value=<%= voi.cstr_upper_py_value %>)<% end -%>
        <% @mda.pos_constraint_variables.each do |voi| %>
        self.add_constraint('<%= voi.name %>', constraint_type="ineq", value=<%= voi.cstr_lower_py_value %>, positive=True)<% end -%>
        <% @mda.bounded_constraint_variables.each do |voi| %>
        self.add_constraint('<%= voi.name %>', constraint_type="ineq", value=<%= voi.cstr_upper_py_value %>)

        self.add_constraint('<%= voi.name %>', constraint_type="ineq", value=<%= voi.cstr_lower_py_value %>, positive=True)<% end -%>
        <% @mda.eq_constraint_variables.each do |voi| %>
        self.add_constraint('<%= voi.name %>', value=<%= voi.cstr_init_py_value %>)<% end -%>


    def _init_base_grammar(self, name):
        name = "MDOScenario"
        self.comp_dir = path.dirname(inspect.getfile(MDOScenario))
        input_grammar_file = self.auto_get_grammar_file(True, name, self.comp_dir)
        output_grammar_file = self.auto_get_grammar_file(False, name, self.comp_dir)
        self._instantiate_grammars(input_grammar_file, output_grammar_file)

<% @mda.plain_disciplines.each do |disc| -%>
    def create_<%= disc.impl.basename %>(self):
    	return <%= disc.impl.py_classname %>()
<% end %>
