<%= @generator.render_partial('base_header_partial.py.erb') %>

import numpy as np
from numpy import nan, inf
import openmdao.api as om

class <%= @discipline.py_classname %>Base(<%= @dimpl.implicit_component ? "om.ImplicitComponent" : "om.ExplicitComponent" %>):
    """ An OpenMDAO base component to encapsulate <%= @discipline.py_classname %> discipline. 
    This class defines inputs and outputs of the discipline and declare partials.
    """

<% unless @discipline.variables.empty? -%>
    def setup(self):
<% @discipline.input_variables.numeric.each do |var| -%>
        self.add_input('<%= var.py_varname %>', val=<%= var.init_py_value %>, <%= var.is_int? ? "tags=['#{Variable::INTEGER_TAG}'] ," : "" %> desc='<%= var.escaped_desc %>'<%= @impl.use_units && !var.units.blank? ? ", units='#{var.units}'":"" %>)
<% end %>
<% @discipline.output_variables.numeric.each do |var| -%>
<% if var.scaling.blank? -%>
        self.add_output('<%= var.py_varname %>', val=<%= var.init_py_value %>, <%= var.is_int? ? "tags=['#{Variable::INTEGER_TAG}'] ," : "" %> desc='<%= var.escaped_desc %>'<%= @impl.use_units && !var.units.blank? ? ", units='#{var.units}'":"" %>)
<%- else -%>
        self.add_output('<%= var.py_varname %>', val=<%= var.init_py_value %>, <%= var.is_int? ? "tags=['#{Variable::INTEGER_TAG}'] ," : "" %> desc='<%= var.escaped_desc %>',
                            ref=<%= var.scaling_ref_py_value %>, ref0=<%= var.scaling_ref0_py_value %>, res_ref=<%= var.scaling_res_ref_py_value %><%= @impl.use_units && !var.units.blank? ? ", units='#{var.units}'":"" %>)
<% end -%>
<% end -%>

<%- unless @discipline.input_variables.numeric.empty? || @discipline.output_variables.numeric.empty? || !@discipline.is_derivable?-%>
    def setup_partials(self):
        self.declare_partials('*', '*', method='<%= @dimpl.support_derivatives ? "exact" : "fd" %>')
<% end -%>
<% else -%>
    pass
<% end -%>
