import numpy as np
from numpy import nan, inf
import matplotlib.pyplot as plt
from mda_init import initialize

import openmdao.api as om
from openmdao_extensions.salib_doe_driver import SalibDOEDriver

from SALib.analyze import morris
from SALib.analyze import sobol
from SALib.plotting import morris as mp
from SALib.plotting.bar import plot as barplot
<% if @remote -%>
from <%= @pkg_prefix %><%= @server_module %>.<%= @impl.py_modulename %>_proxy import <%= @impl.py_classname %>Proxy as <%= @impl.py_classname %> 
<% else -%>
from <%= @pkg_prefix %><%= @impl.py_modulename %> import <%= @impl.py_classname %> 
<% end %>

from optparse import OptionParser
parser = OptionParser()
parser.add_option("--plot",
                  action="store_true", dest="plot", default=False,
                  help="Display scatter plots")
parser.add_option("-s", "--sobol",
                  action="store_true", dest="sobol", default=False,
                  help="do not plot anything")
parser.add_option("-p", "--parallel", 
                  action="store_true", default=False,
                  help="run doe in parallel")
(options, args) = parser.parse_args()

pb = om.Problem(<%= @impl.py_classname %>())
sa_method_name='Morris'
sa_doe_options={'n_trajs': 10, 'n_levels': 4}
if options.sobol:
    sa_method_name='Sobol'
    sa_doe_options={'n_samples': 500, 'calc_second_order': False}

pb.driver = SalibDOEDriver(sa_method_name=sa_method_name, sa_doe_options=sa_doe_options)
pb.driver.options['run_parallel'] = options.parallel

case_recorder_filename = '<%= @sqlite_filename %>'        
recorder = om.SqliteRecorder(case_recorder_filename)
pb.driver.add_recorder(recorder)
pb.driver.recording_options['includes'] = ['*']

<%- @mda.design_variables.each do |dv| %>
pb.model.add_design_var('<%= dv.name %>', lower=<%= dv.lower_py_value %>, upper=<%= dv.upper_py_value %>)<% end %>

pb.setup()  
initialize(pb)

pb.run_driver()        

<% if @mda.response_variables.size < 10 %>
if options.plot and not options.parallel:
    
    reader = om.CaseReader(case_recorder_filename)
    cases = reader.list_cases('driver', recurse=False)
    n = len(cases)
    data = {'inputs': {}, 'outputs': {} }
<% @mda.design_variables.each do |dv| -%>
    data['inputs']['<%= dv.name %>'] = np.zeros((n,)+<%= dv.shape=="1" ? "(1,)" : dv.shape %>)
<% end -%>
<% @mda.response_variables.each do |r| -%>
    data['outputs']['<%= r.name %>'] = np.zeros((n,)+<%= r.shape=="1" ? "(1,)" : r.shape %>)
<% end -%>

    for i in range(len(cases)):
        case = reader.get_case(cases[i])
<% @mda.design_variables.each do |dv| -%>
        data['inputs']['<%= dv.name %>'][i,:] = case.outputs['<%= dv.name %>']
<% end -%>
<% @mda.response_variables.each do |r| -%>
        data['outputs']['<%= r.name %>'][i,:] = case.outputs['<%= r.name %>']
<% end -%>

    salib_pb = pb.driver.get_salib_problem()
    inputs = pb.driver.get_cases()

<% @mda.response_variables.each_with_index do |r, j| -%>
    print('')
    print('*** Output: <%= r.name %>')
    output = data['outputs']['<%= r.name %>'].reshape((-1,))

    if options.sobol:  
        Si = sobol.analyze(salib_pb, output, 
                           calc_second_order=sa_doe_options['calc_second_order'], 
                           print_to_console=True)
        Si_df = Si.to_df()
        fig, axes = plt.subplots(1, len(Si_df))
        for idx, f in enumerate(Si_df):
            axes[idx] = barplot(f, ax=axes[idx])
        fig.suptitle('<%= r.name %> '+'sensitivity')

    else:
        Si = morris.analyze(salib_pb, inputs, output, print_to_console=True)

        fig, (ax1, ax2) = plt.subplots(1,2)
        fig.suptitle('<%= r.name %> '+'sensitivity')

        mp.horizontal_bar_plot(ax1, Si, {})
        mp.covariance_plot(ax2, Si, {})

<% end -%>
    plt.show()
<% else %>
if options.plot:
    print("Plotting disabled. Too many variables to be displayed or parallel option used.")
<% end %>
