import numpy as np
from <%= @pkg_prefix %><%= @discipline.py_full_modulename %>_base import <%= @discipline.py_classname %>Base


class <%= @discipline.py_classname %>(<%= @discipline.py_classname %>Base):
    """ A class to encapsulate <%= @discipline.py_classname %> discipline """

    def compute(self, inputs, outputs):
        """ <%= @discipline.py_classname %> computation """
        # Here the user can implement discipline resolution code
        # (python function or module, external software calls...)

        # Warning: this file is not overwritten when using 'wop update' 
        # hence infos in the input comments provided below as a remainder 
        # are expected to be valid at the time of the initial pull. 
        # The user has to keep infos in sync or just remove them to avoid misunderstanding.
        # That said, one way to get a fresh version of this file is to delete it 
        # and then run 'wop update'.


<%- if @discipline.input_variables.numeric.empty? && @discipline.output_variables.numeric.empty? -%>
        pass
<%- else -%>
<%- @discipline.input_variables.numeric.each do |var_in| -%>
        <%= var_in.py_shortname %> = inputs['<%= var_in.py_varname %>']  # shape: <%= var_in.shape %>, type: <%= var_in.type %>
<% end %>
<%- end -%>

<%- @discipline.output_variables.numeric.each do |var_out| -%>
        outputs['<%= var_out.py_varname %>'] = <%= var_out.default_py_value %>
<%- end -%>

<% if @dimpl.support_derivatives -%>
    def compute_partials(self, inputs, partials):
        """ Jacobian for <%= @discipline.py_classname %> """
<% @discipline.output_variables.numeric.each do |var_out| %><% @discipline.input_variables.numeric.each do |var_in| %>
        partials['<%= var_out.py_varname %>', '<%= var_in.py_varname %>'] = np.zeros((<%= var_out.dim %>, <%= var_in.dim %>))<% end %><% end %>
<% end -%>
