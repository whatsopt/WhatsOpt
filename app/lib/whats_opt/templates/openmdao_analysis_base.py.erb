<%= @generator.render_partial('base_header_partial.py.erb') %>

import numpy as np
from numpy import nan, inf

import openmdao.api as om
<% if @impl.nonlinear_solver.reckless? -%>
from openmdao_extensions.reckless_nonlinear_block_gs import RecklessNonlinearBlockGS
<% else -%>
from openmdao.api import <%= @impl.nonlinear_solver.name %>
<% end -%>
from openmdao.api import <%= @impl.linear_solver.name %>

from openmdao import __version__ as OPENMDAO_VERSION
from openmdao.utils.general_utils import ensure_compatible

<% @mda.sub_analyses.each do |a| -%>
<% if a.super_discipline.is_sub_optimization? %>
# sub optimization
from <%= @pkg_prefix %><%= a.super_discipline.impl.py_modulename %>_mdo import <%= a.super_discipline.impl.py_classname %>Mdo
<% else %> 
# <%= a.super_discipline.type %>
from <%= @pkg_prefix %><%= a.impl.py_full_modulename %> import <%= a.impl.py_classname %>
<% end %>
<% end -%>

<% @mda.all_plain_disciplines.each do |disc| -%>
<% if @check_only || disc.local?(@remote_ip) -%>
from <%= @pkg_prefix %><%= disc.impl.py_full_modulename %> import <%= disc.impl.py_classname %> 
<% else %>
from <%= @pkg_prefix %><%= @server_module %>.remote_discipline import Remote<%= disc.impl.py_classname %>
<% end -%>
<% end -%>

class <%= @impl.py_classname %>FactoryBase():
    """ 
    A factory for all plain disciplines of <%= @mda.name %> analysis.

    One can override methods in a subclass to take control over disciplines creation 
    and pass that subclass to the analysis constructor as a factory argument.
    """
<% @mda.all_plain_disciplines.each do |disc| %>
    def create_<%= disc.impl.snake_modulename %>(self):
<% if (@check_only || disc.local?(@remote_ip)) -%>
        return <%= disc.impl.py_classname %>()
<% else -%>
        """ 
        <%= disc.impl.py_classname %> is expected to be run on remote host <%= disc.host %>.
        """
        return Remote<%= disc.impl.py_classname %>()
<% end -%>
<% end %>

class <%= @impl.py_classname %>Base(<%= @impl.parallel_group ? "om.ParallelGroup" : "om.Group" %>):
    """ An OpenMDAO base component to encapsulate <%= @impl.py_classname %> MDA """

    def initialize(self):
        self.options.declare('factory', default=<%= @impl.py_classname %>FactoryBase(), 
                             types=object, recordable=False)

        self.nonlinear_solver = <%= @impl.nonlinear_solver.name %>()
<% unless @impl.nonlinear_solver.runonce? -%>
        self.nonlinear_solver.options['atol'] = <%= @impl.nonlinear_solver.atol %>
        self.nonlinear_solver.options['rtol'] = <%= @impl.nonlinear_solver.rtol %>
        self.nonlinear_solver.options['err_on_non_converge'] = <%= @impl.to_code(:nonlinear_solver, :err_on_non_converge) %>
        self.nonlinear_solver.options['maxiter'] = <%= @impl.nonlinear_solver.maxiter %>
<% end -%>
        self.nonlinear_solver.options['iprint'] = <%= @impl.nonlinear_solver.iprint %>

        self.linear_solver = <%= @impl.linear_solver.name %>()
<% unless @impl.linear_solver.runonce? || @impl.linear_solver.direct? -%>
        self.linear_solver.options['atol'] = <%= @impl.linear_solver.atol %>
        self.linear_solver.options['rtol'] = <%= @impl.linear_solver.rtol %>
        self.linear_solver.options['err_on_non_converge'] = <%= @impl.to_code(:linear_solver, :err_on_non_converge) %>
        self.linear_solver.options['maxiter'] = <%= @impl.linear_solver.maxiter %>
<% end %>
        self.linear_solver.options['iprint'] = <%= @impl.linear_solver.iprint %>

    def setup(self):<% @mda.input_variables.each do |dv| %>
        value, shape = ensure_compatible('<%= dv.name %>', <%= dv.init_py_value %> <%= dv.ndim > 0 ? ", shape=#{dv.shape}" : "" %>)
        self.set_input_defaults('<%= dv.name %>', val=value <%= @impl.use_units && !dv.units.blank? ? ", units='#{dv.units}'":"" %>)<% end -%>
<% @mda.disciplines.nodes.each do |disc| %>
        self.add_subsystem('<%= disc.impl.py_modulename %>', self.create_<%= disc.impl.basename %>(),
                           promotes=[<%= disc.variables.map(&:py_varname).map{|v| "'#{v}'"}.join(', ') %>])<% end -%>

<% @mda.sub_analyses.each do |a| %>
    def create_<%= a.impl.py_modulename %>(self):
        """ 
        User can override this method in a subclass 
        to take control over <%= a.impl.py_classname %> sub analysis creation.
        """
<% if a.super_discipline.is_sub_optimization? %>
        return <%= a.super_discipline.impl.py_classname %>Mdo()
<% else %>
        return <%= a.impl.py_classname %>(factory=self.options["factory"])
<% end %>
<% end -%>
<% @mda.plain_disciplines.each do |disc| %>
    def create_<%= disc.impl.py_modulename %>(self):
        return self.options["factory"].create_<%= disc.impl.snake_modulename %>()
<% end %>

