<%= @generator.render_partial('base_header_partial.py.erb') %>

import numpy as np
from numpy import nan, inf
import openmdao.api as om

from <%= @pkg_prefix %><%= @discipline.sub_analysis.py_full_modulename %> import <%= @discipline.sub_analysis.py_classname %>
<%- if @driver.onerasego? -%>
from openmdao_extensions.onera_sego_driver import OneraSegoDriver
<%- elsif @driver.egobox? -%>
from openmdao_extensions.egobox_egor_driver import EgoboxEgorDriver
import egobox as egx
import logging
logging.basicConfig(level=logging.INFO)
<%- end -%>

class <%= @discipline.py_classname %>MdoBase(om.SubmodelComp):
    """ An OpenMDAO base component to encapsulate an MDO as <%= @discipline.py_classname %> discipline. 
    This class defines inputs and outputs of the MDO discipline and declare partials.
    """

    def __init__(self, inputs=None, outputs=None, reports=False, **kwargs):

        # Problem definition
        pb = om.Problem(<%= @discipline.py_classname %>())
        super().__init__(pb, inputs=None, outputs=None, reports=False, **kwargs)

        <%- if @driver.pyoptsparse? -%>
        pb.driver = om.pyOptSparseDriver()
        <%- elsif @driver.onerasego? -%>
        pb.driver = OneraSegoDriver()
        <%- elsif @driver.egobox? -%>
        pb.driver = EgoboxEgorDriver()
        <%- else -%>
        pb.driver = om.ScipyOptimizeDriver()
        <%- end -%>

        # Optimizer options
        pb.driver.options['optimizer'] = '<%= @driver.algo_option %>'
        <%- @driver.options.each do |k, v| -%>
        pb.driver.options['<%= k %>'] = <%= v %>
        <%- end -%>
        <%- @driver.opt_settings.each do |k, v| -%>
        pb.driver.opt_settings['<%= k %>'] = <%= v %>
        <%- end -%>

        # pb.driver.options['debug_print'] = ['desvars','ln_cons','nl_cons','objs', 'totals']
        pb.driver.options['debug_print'] = []

        # Design variables
        <%- if @mda.design_variables.empty? -%>
        print("Error: You have to specify some design variables in <%= @discipline.name %> then update and retry.")
        exit(-1)
        <%- end -%>
        <%- @mda.design_variables.each do |dv| -%>
        pb.model.add_design_var('<%= dv.name %>', lower=<%= dv.lower_py_value %>, upper=<%= dv.upper_py_value %><%= @impl.use_units && !dv.units.blank? ? ", units='#{dv.units}'":"" %>)
        <%- end -%>

        # Objective and constraints definition
        <%- if @mda.objective_variables.empty? -%>
        print("Error: You have to specify an optimization objective in <%= @discipline.name %> then update and retry.")
        exit(-1)
        <% end %>
        <% @mda.min_objective_variables.each do |voi| %>
        pb.model.add_objective('<%= voi.name %>'<%= @impl.use_units && !voi.units.blank? ? ", units='#{voi.units}'":"" %>)
        <%- end -%>
        <%- @mda.max_objective_variables.each do |voi| %>
        pb.model.add_objective('<%= voi.name %>', scaler=-1<%= @impl.use_units && !voi.units.blank? ? ", units='#{voi.units}'":"" %>)
        <%- end -%>
        <%- @mda.neg_constraint_variables.each do |voi| %>
        pb.model.add_constraint('<%= voi.name %>', upper=<%= voi.cstr_upper_py_value %><%= @impl.use_units && !voi.units.blank? ? ", units='#{voi.units}'":"" %>)
        <%- end -%>
        <%- @mda.pos_constraint_variables.each do |voi| %>
        pb.model.add_constraint('<%= voi.name %>', lower=<%= voi.cstr_lower_py_value %><%= @impl.use_units && !voi.units.blank? ? ", units='#{voi.units}'":"" %>)
        <%- end -%>
        <%- @mda.eq_constraint_variables.each do |voi| %>
        pb.model.add_constraint('<%= voi.name %>', equals=<%= voi.cstr_init_py_value %><%= @impl.use_units && !voi.units.blank? ? ", units='#{voi.units}'":"" %>)
        <%- end -%>
        <%- @mda.bounded_constraint_variables.each do |voi| %>
        pb.model.add_constraint('<%= voi.name %>', lower=<%= voi.cstr_lower_py_value %>, upper=<%= voi.cstr_upper_py_value %><%= @impl.use_units && !voi.units.blank? ? ", units='#{voi.units}'":"" %>)
        <%- end -%>

<% unless @discipline.variables.empty? -%>
    def setup(self):
        super().setup()
<% @discipline.input_variables.numeric.each do |var| -%>
        self.add_input('<%= var.py_varname %>', val=<%= var.init_py_value %>, <%= var.ndim > 0 ? "shape=#{var.shape} ," : "" %> <%= var.is_int? ? "tags=['#{Variable::INTEGER_TAG}'] ," : "" %> desc='<%= var.escaped_desc %>'<%= @impl.use_units && !var.units.blank? ? ", units='#{var.units}'":"" %>)
<% end %>
<% @discipline.output_variables.numeric.each do |var| -%>
<% if var.scaling.blank? -%>
        self.add_output('<%= var.py_varname %>', val=<%= var.init_py_value %>, <%= var.ndim > 0 ? "shape=#{var.shape} ," : "" %> <%= var.is_int? ? "tags=['#{Variable::INTEGER_TAG}'] ," : "" %> desc='<%= var.escaped_desc %>'<%= @impl.use_units && !var.units.blank? ? ", units='#{var.units}'":"" %>)
<%- else -%>
        self.add_output('<%= var.py_varname %>', val=<%= var.init_py_value %>, <%= var.ndim > 0 ? "shape=#{var.shape} ," : "" %> <%= var.is_int? ? "tags=['#{Variable::INTEGER_TAG}'] ," : "" %> desc='<%= var.escaped_desc %>',
                            ref=<%= var.scaling_ref_py_value %>, ref0=<%= var.scaling_ref0_py_value %>, res_ref=<%= var.scaling_res_ref_py_value %><%= @impl.use_units && !var.units.blank? ? ", units='#{var.units}'":"" %>)
<% end -%>
<% end -%>

<%- unless @discipline.input_variables.numeric.empty? || @discipline.output_variables.numeric.empty? || !@discipline.is_derivable?-%>
    def setup_partials(self):
        self.declare_partials('*', '*', method='<%= @dimpl.support_derivatives ? "exact" : "fd" %>')
<% end -%>
<% else -%>
    pass
<% end -%>
