#
# Autogenerated by Thrift Compiler (0.18.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'whatsopt_services_types'

module WhatsOpt
  module Services
    module SensitivityAnalyser
      class Client
        include ::Thrift::Client

        def compute_hsic(xdoe, ydoe, thresholding_type, quantile, g_threshold)
          send_compute_hsic(xdoe, ydoe, thresholding_type, quantile, g_threshold)
          return recv_compute_hsic()
        end

        def send_compute_hsic(xdoe, ydoe, thresholding_type, quantile, g_threshold)
          send_message('compute_hsic', Compute_hsic_args, :xdoe => xdoe, :ydoe => ydoe, :thresholding_type => thresholding_type, :quantile => quantile, :g_threshold => g_threshold)
        end

        def recv_compute_hsic()
          fname, mtype, rseqid = receive_message_begin()
          handle_exception(mtype)
          if reply_seqid(rseqid)==false
            raise "seqid reply faild"
          end
          result = receive_message(Compute_hsic_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'compute_hsic failed: unknown result')
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_compute_hsic(seqid, iprot, oprot)
          args = read_args(iprot, Compute_hsic_args)
          result = Compute_hsic_result.new()
          result.success = @handler.compute_hsic(args.xdoe, args.ydoe, args.thresholding_type, args.quantile, args.g_threshold)
          write_result(result, oprot, 'compute_hsic', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Compute_hsic_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        XDOE = 1
        YDOE = 2
        THRESHOLDING_TYPE = 3
        QUANTILE = 4
        G_THRESHOLD = 5

        FIELDS = {
          XDOE => {:type => ::Thrift::Types::LIST, :name => 'xdoe', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}},
          YDOE => {:type => ::Thrift::Types::LIST, :name => 'ydoe', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}},
          THRESHOLDING_TYPE => {:type => ::Thrift::Types::I32, :name => 'thresholding_type', :enum_class => ::WhatsOpt::Services::HsicThresholding},
          QUANTILE => {:type => ::Thrift::Types::DOUBLE, :name => 'quantile'},
          G_THRESHOLD => {:type => ::Thrift::Types::DOUBLE, :name => 'g_threshold'}
        }

        def struct_fields; FIELDS; end

        def validate
          unless @thresholding_type.nil? || ::WhatsOpt::Services::HsicThresholding::VALID_VALUES.include?(@thresholding_type)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field thresholding_type!')
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Compute_hsic_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::WhatsOpt::Services::HsicAnalysis}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
